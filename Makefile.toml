[config]
default_to_workspace = false


# Run clippy for wasm32 target

[tasks.clippy-wasm32]
dependencies = [ "wasm32-target" ]
command = "cargo"
args = [
    "clippy", "--all-features", "--target", "wasm32-unknown-unknown",
    "-p", "vertigo", "-p", "vertigo-macro", "-p", "vertigo-browserdriver",
    "-p", "vertigo-demo", "-p", "vertigo-example-counter", "-p", "vertigo-example-router"
]


# Demo tasks

[tasks.demo-build]
dependencies = [ "wasm32-target", "demo-clean" ]
script = [
    "mkdir -p demo/build",
    "cargo build -p vertigo-demo --release --target wasm32-unknown-unknown",
    "cp ${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/wasm32-unknown-unknown/release/wasm_run.js ./demo/build/wasm_run.js",
    "wasm-opt -Os --strip-debug -o ./demo/build/vertigo_demo.wasm ${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/wasm32-unknown-unknown/release/vertigo_demo.wasm",
    "cp ./demo/app/index.html ./demo/build",
]

[tasks.demo-serve-old]
install_crate = { crate_name = "basic-http-server", binary = "basic-http-server", test_arg = ["--version"] }
command = "basic-http-server"
args = [ "--addr", "127.0.0.1:3000", "./build" ]

[tasks.demo-serve]
command = "cargo"
args = [ "run", "--bin", "vertigo-demo-server" ]

[tasks.demo-start]
dependencies = [
    "demo-build",
    "demo-serve"
]

[tasks.demo-watch]
command = "cargo"
args = [ "watch", "--watch", "./demo/app", "--watch", "crates", "--delay", "0.5", "-x", "make demo-start" ]

[tasks.demo-clean]
script = [
    "rm -Rf demo/build"
]

# Examples tasks

[env]
EXAMPLES = "counter router"

# Run without arguments to build all examples; provide example name to build only this particular example
[tasks.examples-build]
dependencies = [ "wasm32-target" ]
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = ["--version"] }
script = '''
    NAME=${@}
    if [ "$NAME" = "" ]; then
        for name in ${EXAMPLES}; do
            cargo make examples-build ${name}
        done
    else
        wasm-pack build examples/${NAME} --no-typescript --target web --out-dir ../build/${NAME} --out-name app --release
        cp examples/${NAME}/index.html examples/build/${NAME}
        rm examples/build/${NAME}/.gitignore
        rm examples/build/${NAME}/package.json
    fi
'''

[tasks.examples-clean]
command = "rm"
args = [ "-rf", "examples/build" ]


# Dependencies

[tasks.wasm32-target]
install_script = '''
    if [ "$(rustup target list | grep wasm32-unknown-unknown | grep installed)" = "" ];
    then
        rustup target add wasm32-unknown-unknown;
    fi
'''

# JavaScript dev builds

[tasks.build-js-run-ts]
command = "npx"
args = [ "-p", "typescript", "tsc",
    "--strict",
    "--noUnusedLocals", "--noUnusedParameters", "--noUncheckedIndexedAccess",
    "--noEmitOnError",
    "--lib", "es6,dom,esnext",
    "--target", "esnext",
    "--module", "es6",
    "--outDir", "crates/vertigo-browserdriver/src_js_build",
    "crates/vertigo-browserdriver/src_js/index.ts",
]

[tasks.build-js]
dependencies = [ "build-js-run-ts" ]
script = [
    "npx rollup crates/vertigo-browserdriver/src_js_build/index.js --file crates/vertigo-browserdriver/src/wasm_run.js",
    "rm -rf crates/vertigo-browserdriver/src_js_build",
]
