// Modified grammar from https://github.com/mathiversen/html-parser
//
// HTML
//
html = _{
    SOI
    ~ node_comment*
    ~ root_node*
    ~ EOI
}

//
// NODES
//
root_node = _{ node_element }
node = _{ node_comment | node_element | children | expression | node_text }
node_comment = _{ comment_if | comment_normal }
node_text = { (!(node_element | comment_tag_start | expression) ~ ANY)+ }
node_element = _{ el_vcomponent_val | el_vcomponent | el_velement | el_void | el_void_xml | el_raw_text | el_normal | el_dangling }

//
// COMMENTS
//
comment_normal = _{ comment_tag_start ~ (!comment_tag_end ~ ANY)* ~ comment_tag_end }
comment_tag_start = _{ chevron_left_bang ~ "-" ~ "-" }
comment_tag_end = _{ "-" ~ "-" ~ chevron_right_normal }

// Compatability with old IE browsers... This is not necessary for newer browsers
comment_if = _{ comment_if_start ~ (!comment_if_end ~ ANY)* ~ comment_if_end }
comment_if_start = _{ comment_tag_start ~ "[" ~ ^"if" }
comment_if_end = _{ chevron_left_bang ~ "[" ~ ^"endif" ~ "]" ~ comment_tag_end }

//
// ATTRIBUTES
//

attr = _{ css_attr | on_click_attr | on_input_attr | on_mouse_enter_attr | on_mouse_leave_attr | on_key_down_attr | expression_attr | regular_attr }

css_attr = { "css" ~ equal ~ attr_expression }
on_click_attr = { "on_click" ~ equal ~ attr_expression }
on_input_attr = { "on_input" ~ equal ~ attr_expression }
on_mouse_enter_attr = { "on_mouse_enter" ~ equal ~ attr_expression }
on_mouse_leave_attr = { "on_mouse_leave" ~ equal ~ attr_expression }
on_key_down_attr = { "on_key_down" ~ equal ~ attr_expression }
expression_attr = { attr_key ~ equal ~ attr_expression }
regular_attr = { attr_key ~ (equal ~ (attr_non_quoted | attr_quoted ))? }

attr_quoted =  _{ PUSH(quote) ~ attr_value ~ POP }
attr_non_quoted = @{ !quote ~ (!(WHITESPACE | chevron_right) ~ ANY)* }
attr_key = { ASCII_ALPHA ~ text_chars* }
attr_value = { (!PEEK ~ ANY)* }

// { } and {$ $} expressions
expression = { brace_left ~ PUSH("$"*) ~ expression_value ~ POP ~ brace_right }
expression_value = { (!(PEEK ~ brace_right) ~ ANY)* }

// { ..vector } and {$ ..vector $} expression
// TODO: Try using !-rule instead of manual whitespacing it
children = !{ brace_left ~ PUSH("$"*) ~ ".." ~ expression_value ~ POP ~ brace_right }

// { } expression in attribute value
attr_expression = _{ brace_left ~ attr_expression_value ~ brace_right }
attr_expression_value = { (!brace_right ~ ANY)* }

//
// ELEMENTS
//
el_name = @{ ASCII_ALPHA ~ text_chars* }

// Void element aka self-closing element
// Ex: <hr>
el_void_name_html = @{
    ^"area"
    | ^"base"
    | ^"br"
    | ^"col"
    | ^"command"
    | ^"embed"
    | ^"hr"
    | ^"img"
    | ^"input"
    | ^"keygen"
    | ^"link"
    | ^"meta"
    | ^"param"
    | ^"source"
    | ^"track"
    | ^"wbr"
    | ^"meta"
}
// NOTE: This should not have to be a rule, but people doesn't know what void elements are...
el_void_name_svg = @{
    ^"path"
    | ^"polygon"
    | ^"rect"
    | ^"circle"
}
el_void_name = @{ el_void_name_html | el_void_name_svg }
el_void = !{ chevron_left_normal ~ el_void_name ~ (attr)* ~ (chevron_right_normal | chevron_right_closed) }
el_void_xml = { chevron_left_normal ~ el_name ~ attr* ~ chevron_right_closed }

// Open elements are default element that can take children
// and have both a start tag and an end tag
// Ex: <html lang="en"></html>
el_normal = { el_normal_start ~ (!el_normal_end ~ node)* ~ el_normal_end }
el_normal_start = !{ chevron_left_normal ~ PUSH(el_name) ~ attr* ~ chevron_right_normal}
el_normal_end = !{ chevron_left_closed ~ POP ~ chevron_right_normal}

el_vcomponent = !{ chevron_left_normal ~ "component" ~ vcomp_render_func ~ vcomp_data_attr? ~ attr* ~ chevron_right_closed }
vcomp_render_func = { attr_expression }
vcomp_data_attr = { "data" ~ equal ~ attr_expression }

// TODO: Hack this out
el_vcomponent_val = !{ chevron_left_normal ~ "component_val" ~ vcomp_render_func ~ vcomp_data_attr? ~ attr* ~ chevron_right_closed }

el_velement = !{ chevron_left_normal ~ "element" ~ velem_value ~ chevron_right_closed }
velem_value = _{ attr_expression }

// Raw text elements are elements with text/script content that
// might interfere with the normal html syntax
el_raw_text_name = {
    ^"style"
    | ^"script"
    | ^"title"
    | ^"textarea"
}
el_raw_text_content = { (!el_raw_text_end ~ ANY)+ }
el_raw_text = { el_raw_text_start ~ (expression | el_raw_text_content) ~ el_raw_text_end }
el_raw_text_start = _{ chevron_left_normal ~ PUSH(el_raw_text_name) ~ attr* ~ chevron_right_normal}
el_raw_text_end = _{ chevron_left_closed ~ POP ~ chevron_right_normal}

// Catch dangling elements
// Ex: <div/></div>
el_dangling = { chevron_left_closed ~ el_name ~ chevron_right_normal}

//
// SYMBOLS / CHARACTERS
//
text_chars = _{'a'..'z' | 'A'..'Z' | "_" | "-" | ":" |'0'..'9'}

chevron_left_normal = _{ "<" }
chevron_left_closed = _{ "<" ~ "/" }
chevron_left_bang = _{ "<" ~ "!" }

chevron_right_normal = _{ ">" }
chevron_right_closed = _{ "/" ~ ">" }
chevron_right = _{ chevron_right_normal | chevron_right_closed }

equal = _{ "=" }
quote_dubble = _{ "\"" }
quote_single = _{ "'" }
quote = _{ quote_dubble | quote_single }
brace_left = _{ "{" }
brace_right = _{ "}" }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
