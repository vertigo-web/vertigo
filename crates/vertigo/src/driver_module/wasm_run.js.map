{"version":3,"file":"wasm_run.js","sources":["src_js/assert_never.ts","src_js/buffer_cursor.ts","src_js/jsvalue_types.ts","src_js/guard.ts","src_js/jsjson.ts","src_js/jsvalue.ts","src_js/wasm_init.ts","src_js/api_browser/cookies.ts","src_js/api_browser/interval.ts","src_js/api_browser/hashrouter.ts","src_js/api_browser/fetch.ts","src_js/api_browser/websocket/event_emiter.ts","src_js/api_browser/websocket/promise.ts","src_js/api_browser/websocket/connection.ts","src_js/api_browser/websocket/websocket.ts","src_js/api_browser/dom/map_nodes.ts","src_js/api_browser/dom/dom.ts","src_js/api_browser/historyLocation.ts","src_js/api_browser.ts","src_js/js_node.ts","src_js/wasm_module.ts","src_js/index.ts"],"sourcesContent":["\nexport const assertNever = (_value: never) => {\n    throw Error(\"assert never\");\n}\n","///https://javascript.info/arraybuffer-binary-arrays#dataview\n\nconst decoder = new TextDecoder(\"utf-8\");\nconst encoder = new TextEncoder();\n\nexport class BufferCursor {\n    private dataView: DataView;\n    private pointer: number = 0;\n\n    constructor(\n        private getUint8Memory: () => Uint8Array,\n        private ptr: number,\n        private size: number,\n    ) {\n        this.dataView = new DataView(\n            this.getUint8Memory().buffer,\n            this.ptr,\n            this.size\n        );\n    }\n\n    public getByte(): number {\n        const value = this.dataView.getUint8(this.pointer);\n        this.pointer += 1;\n        return value;\n    }\n\n    public setByte(byte: number) {\n        this.dataView.setUint8(this.pointer, byte);\n        this.pointer += 1;\n    }\n\n    public getU16(): number {\n        const value = this.dataView.getUint16(this.pointer);\n        this.pointer += 2;\n        return value;\n    }\n\n    public setU16(value: number) {\n        this.dataView.setUint16(this.pointer, value);\n        this.pointer += 2;\n    }\n\n    public getU32(): number {\n        const value = this.dataView.getUint32(this.pointer);\n        this.pointer += 4;\n        return value;\n    }\n\n    public setU32(value: number) {\n        this.dataView.setUint32(this.pointer, value);\n        this.pointer += 4;\n    }\n\n    public getI32(): number {\n        const value = this.dataView.getInt32(this.pointer);\n        this.pointer += 4;\n        return value;\n    }\n\n    public setI32(value: number) {\n        this.dataView.setInt32(this.pointer, value);\n        this.pointer += 4;\n    }\n\n    public getU64(): bigint {\n        const value = this.dataView.getBigUint64(this.pointer);\n        this.pointer += 8;\n        return value;\n    }\n\n    public setU64(value: bigint) {\n        this.dataView.setBigUint64(this.pointer, value);\n        this.pointer += 8;\n    }\n\n    public getI64(): bigint {\n        const value = this.dataView.getBigInt64(this.pointer);\n        this.pointer += 8;\n        return value;\n    }\n\n    public setI64(value: bigint) {\n        this.dataView.setBigInt64(this.pointer, value);\n        this.pointer += 8;\n    }\n\n    public getF64(): number {\n        const value = this.dataView.getFloat64(this.pointer);\n        this.pointer += 8;\n        return value;\n    }\n\n    public setF64(value: number) {\n        this.dataView.setFloat64(this.pointer, value);\n        this.pointer += 8;\n    }\n\n    public getBuffer(): Uint8Array {\n        const size = this.getU32();\n        const result = this\n            .getUint8Memory()\n            .subarray(\n                this.ptr + this.pointer,\n                this.ptr + this.pointer + size\n            );\n\n        this.pointer += size;\n        return result;\n    }\n\n    public setBuffer(buffer: Uint8Array) {\n        const size = buffer.length;\n        this.setU32(size);\n\n        const sub_buffer = this\n            .getUint8Memory()\n            .subarray(\n                this.ptr + this.pointer,\n                this.ptr + this.pointer + size\n            );\n\n        sub_buffer.set(buffer);\n\n        this.pointer += size;\n    }\n\n    public getString(): string {\n        return decoder.decode(this.getBuffer());\n    }\n\n    public setString(value: string) {\n        const buffer = encoder.encode(value);\n        this.setBuffer(buffer);\n    }\n\n    public getSavedSize(): number {\n        return this.pointer;\n    }\n}\n\nexport const getStringSize = (value: string): number => {\n    return new TextEncoder().encode(value).length;\n};\n\n","import { JsJsonType } from \"./jsjson\";\n\nexport const JsValueConst = {\n    U32: 1,\n    I32: 2,\n    U64: 3,\n    I64: 4,\n    F64: 5,\n\n    True: 6,\n    False: 7,\n    Null: 8,\n    Undefined: 9,\n\n    Vec: 10,\n    String: 11,\n    List: 12,\n    Object: 13,\n    Json: 14,\n} as const;\n\nexport type JsValueType\n    = { type: typeof JsValueConst.U32, value: number, }\n    | { type: typeof JsValueConst.I32, value: number, }\n    | { type: typeof JsValueConst.U64, value: bigint, }\n    | { type: typeof JsValueConst.I64, value: bigint, }\n    | { type: typeof JsValueConst.F64, value: number, }\n    | boolean\n    | null\n    | undefined\n    | string\n    | Array<JsValueType>\n    | Uint8Array\n    | { type: typeof JsValueConst.Object, value: JsValueMapType }\n    | { type: typeof JsValueConst.Json, value: JsJsonType };\n\nexport interface JsValueMapType {\n    [key: string]: JsValueType\n}\n","import { JsValueType, JsValueConst, JsValueMapType } from \"./jsvalue_types\";\n\nexport namespace GuardJsValue {\n    export const isString = (value: JsValueType): value is string => {\n        return typeof value === 'string';\n    }\n\n    export const isStringOrNull = (value: JsValueType): value is string | null => {\n        return value === null || typeof value === 'string';\n    }\n\n    export const isNumber = (value: JsValueType): value is { type: typeof JsValueConst.U32, value: number } | { type: typeof JsValueConst.I32, value: number } => {\n        if (typeof value === 'object' && value !== null && 'type' in value) {\n            return value.type === JsValueConst.I32 || value.type === JsValueConst.U32\n        }\n\n        return false;\n    }\n\n    export const isBigInt = (value: JsValueType): value is { type: typeof JsValueConst.U64, value: bigint } | { type: typeof JsValueConst.I64, value: bigint } => {\n        if (typeof value === 'object' && value !== null && 'type' in value) {\n            return value.type === JsValueConst.I64 || value.type === JsValueConst.U64\n        }\n\n        return false;\n    }\n\n    export const isJsObject = (value: JsValueType): value is { type: typeof JsValueConst.Object, value: JsValueMapType } => {\n        return (\n            value !== null &&\n            typeof value === 'object' &&\n            'type' in value &&\n            value.type === JsValueConst.Object\n        );\n    }\n}\n","import { BufferCursor, getStringSize } from \"./buffer_cursor\";\n\nconst JsJsonConst = {\n    True: 1,\n    False: 2,\n    Null: 3,\n\n    String: 4,\n    Number: 5,\n    List: 6,\n    Object: 7,\n} as const;\n\nexport type JsJsonType\n    = boolean\n    | null\n    | number\n    | string\n    | Array<JsJsonType>\n    | JsJsonMapType;\n\ninterface JsJsonMapType {\n    [key: string]: JsJsonType\n}\n\nexport const jsJsonGetSize = (value: JsJsonType): number => {\n\n    if (typeof value === 'boolean') {\n        return 1;\n    }\n\n    if (value === null) {\n        return 1;\n    }\n\n    if (typeof value === 'string') {\n        return 1 + 4 + getStringSize(value);\n    }\n\n    if (Array.isArray(value)) {\n        let sum = 1 + 4;\n\n        for (const item of value) {\n            sum += jsJsonGetSize(item);\n        }\n\n        return sum;\n    }\n\n    if (typeof value === 'number') {\n        return 9;   //1 + 8\n    }\n\n    //object\n    let sum = 1 + 2;\n\n    for (const [key, propertyValue] of Object.entries(value)) {\n        sum += 4 + getStringSize(key);\n        sum += jsJsonGetSize(propertyValue);\n    }\n\n    return sum;\n};\n\nexport const jsJsonDecodeItem = (cursor: BufferCursor): JsJsonType => {\n    const typeParam = cursor.getByte();\n\n    if (typeParam === JsJsonConst.True) {\n        return true;\n    }\n\n    if (typeParam === JsJsonConst.False) {\n        return false;\n    }\n\n    if (typeParam === JsJsonConst.Null) {\n        return null;\n    }\n\n    if (typeParam === JsJsonConst.String) {\n        return cursor.getString();\n    }\n\n    if (typeParam === JsJsonConst.Number) {\n        return cursor.getF64();\n    }\n\n    if (typeParam === JsJsonConst.List) {\n        const out: Array<JsJsonType> = [];\n\n        const listSize = cursor.getU32();\n\n        for (let i=0; i<listSize; i++) {\n            out.push(jsJsonDecodeItem(cursor))\n        }\n\n        return out;\n    }\n\n    //object\n    const out: Record<string, JsJsonType> = {};\n\n    const listSize = cursor.getU16();\n\n    for (let i=0; i<listSize; i++) {\n        const key = cursor.getString();\n        const value = jsJsonDecodeItem(cursor);\n        out[key] = value;\n    }\n\n    return out;\n}\n\nexport const saveJsJsonToBufferItem = (value: JsJsonType, cursor: BufferCursor) => {\n    if (value === true) {\n        cursor.setByte(JsJsonConst.True);\n        return;\n    }\n\n    if (value === false) {\n        cursor.setByte(JsJsonConst.False);\n        return;\n    }\n\n    if (value === null) {\n        cursor.setByte(JsJsonConst.Null);\n        return;\n    }\n\n    if (typeof value === 'string') {\n        cursor.setByte(JsJsonConst.String);\n        cursor.setString(value);\n        return;\n    }\n\n    if (typeof value === 'number') {\n        cursor.setByte(JsJsonConst.Number);\n        cursor.setF64(value);\n        return;\n    }\n\n    if (Array.isArray(value)) {\n        cursor.setByte(JsJsonConst.List);\n        cursor.setU32(value.length);\n\n        for (const item of value) {\n            saveJsJsonToBufferItem(item, cursor);\n        }\n\n        return;\n    }\n\n    //object\n    const list: Array<[string, JsJsonType]> = [];\n\n    for (const [key, propertyValue] of Object.entries(value)) {\n        list.push([key, propertyValue]);\n    }\n\n    cursor.setByte(JsJsonConst.Object);\n    cursor.setU16(list.length);\n\n    for (const [key, propertyValue] of list) {\n        cursor.setString(key);\n        saveJsJsonToBufferItem(propertyValue, cursor);\n    }\n};\n","import { assertNever } from \"./assert_never\";\nimport { BufferCursor, getStringSize } from \"./buffer_cursor\";\nimport { GuardJsValue } from \"./guard\";\nimport { jsJsonDecodeItem, jsJsonGetSize, JsJsonType, saveJsJsonToBufferItem } from \"./jsjson\";\nimport { JsValueType, JsValueConst } from \"./jsvalue_types\";\n\n//https://github.com/unsplash/unsplash-js/pull/174\n// export type AnyJson = boolean | number | string | null | JsonArray | JsonMap;\n// export interface JsonMap { [key: string]: AnyJson }\n// export interface JsonArray extends Array<AnyJson> {}\n\n\nconst jsValueDecodeItem = (cursor: BufferCursor): JsValueType => {\n    const typeParam = cursor.getByte();\n\n    if (typeParam === JsValueConst.U32) {\n        return {\n            type: JsValueConst.U32,\n            value: cursor.getU32()\n        };\n    }\n\n    if (typeParam === JsValueConst.I32) {\n        return {\n            type: JsValueConst.I32,\n            value: cursor.getI32()\n        };\n    }\n\n    if (typeParam === JsValueConst.U64) {\n        return {\n            type: JsValueConst.U64,\n            value: cursor.getU64()\n        };\n    }\n\n    if (typeParam === JsValueConst.I64) {\n        return {\n            type: JsValueConst.I64,\n            value: cursor.getI64()\n        };\n    }\n\n    if (typeParam === JsValueConst.F64) {\n        return {\n            type: JsValueConst.F64,\n            value: cursor.getF64()\n        };\n    }\n\n    if (typeParam === JsValueConst.True) {\n        return true;\n    }\n\n    if (typeParam === JsValueConst.False) {\n        return false;\n    }\n\n    if (typeParam === JsValueConst.Null) {\n        return null;\n    }\n\n    if (typeParam === JsValueConst.Undefined) {\n        return undefined;\n    }\n\n    if (typeParam === JsValueConst.Vec) {\n        return cursor.getBuffer();\n    }\n\n    if (typeParam === JsValueConst.String) {\n        return cursor.getString();\n    }\n\n    if (typeParam === JsValueConst.List) {\n        const out: Array<JsValueType> = [];\n\n        const listSize = cursor.getU32();\n\n        for (let i=0; i<listSize; i++) {\n            out.push(jsValueDecodeItem(cursor))\n        }\n\n        return out;\n    }\n\n    if (typeParam === JsValueConst.Object) {\n        const out: Record<string, JsValueType> = {};\n\n        const listSize = cursor.getU16();\n\n        for (let i=0; i<listSize; i++) {\n            const key = cursor.getString();\n            const value = jsValueDecodeItem(cursor);\n            out[key] = value;\n        }\n\n        return {\n            type: JsValueConst.Object,\n            value: out\n        };\n    }\n\n    if (typeParam === JsValueConst.Json) {\n        const json = jsJsonDecodeItem(cursor);\n\n        return {\n            type: JsValueConst.Json,\n            value: json\n        };\n    }\n\n    console.error('typeParam', typeParam);\n    throw Error('Invalid branch');\n};\n\nexport const jsValueDecode = (getUint8Memory: () => Uint8Array, ptr: number, size: number): JsValueType => {\n    try {\n        const cursor = new BufferCursor(getUint8Memory, ptr, size);\n        return jsValueDecodeItem(cursor);\n    } catch (err) {\n        console.error(err);\n        return [];\n    }\n};\n\nconst getSize = (value: JsValueType): number => {\n    if (\n        value === true ||\n        value === false ||\n        value === null ||\n        value === undefined\n    ) {\n        return 1;\n    }\n\n    if (GuardJsValue.isString(value)) {\n        return 1 + 4 + getStringSize(value);\n    }\n\n    if (Array.isArray(value)) {\n        let sum = 1 + 4;\n\n        for (const item of value) {\n            sum += getSize(item);\n        }\n\n        return sum;\n    }\n\n    if (value instanceof Uint8Array) {\n        return 1 + 4 + value.length;\n    }\n\n    if (value.type === JsValueConst.I32 || value.type === JsValueConst.U32) {\n        return 5;   // 1 + 4\n    }\n\n    if (value.type === JsValueConst.I64 || value.type === JsValueConst.U64 || value.type == JsValueConst.F64) {\n        return 9;   // 1 + 8\n    }\n\n    if (value.type === JsValueConst.Object) {\n        let sum = 1 + 2;\n\n        for (const [key, propertyValue] of Object.entries(value.value)) {\n            sum += 4 + getStringSize(key);\n            sum += getSize(propertyValue);\n        }\n\n        return sum;\n    }\n\n    if (value.type === JsValueConst.Json) {\n        return 1 + jsJsonGetSize(value.value);\n    }\n\n    return assertNever(value);\n};\n\nconst saveToBufferItem = (value: JsValueType, cursor: BufferCursor) => {\n    if (value === true) {\n        cursor.setByte(JsValueConst.True);\n        return;\n    }\n\n    if (value === false) {\n        cursor.setByte(JsValueConst.False);\n        return;\n    }\n\n    if (value === null) {\n        cursor.setByte(JsValueConst.Null);\n        return;\n    }\n\n    if (value === undefined) {\n        cursor.setByte(JsValueConst.Undefined);\n        return;\n    }\n\n    if (value instanceof Uint8Array) {\n        cursor.setByte(JsValueConst.Vec);\n        cursor.setBuffer(value);\n        return;\n    }\n\n    if (GuardJsValue.isString(value)) {\n        cursor.setByte(JsValueConst.String);\n        cursor.setString(value);\n        return;\n    }\n\n    if (Array.isArray(value)) {\n        cursor.setByte(JsValueConst.List);\n        cursor.setU32(value.length);\n\n        for (const item of value) {\n            saveToBufferItem(item, cursor);\n        }\n\n        return;\n    }\n\n    if (value.type === JsValueConst.U32) {\n        cursor.setByte(JsValueConst.U32);\n        cursor.setU32(value.value);\n        return;\n    }\n\n    if (value.type === JsValueConst.I32) {\n        cursor.setByte(JsValueConst.I32);\n        cursor.setI32(value.value);\n        return;\n    }\n\n    if (value.type === JsValueConst.U64) {\n        cursor.setByte(JsValueConst.U64);\n        cursor.setU64(value.value);\n        return;\n    }\n\n    if (value.type === JsValueConst.I64) {\n        cursor.setByte(JsValueConst.I64);\n        cursor.setI64(value.value);\n        return;\n    }\n\n    if (value.type === JsValueConst.F64) {\n        cursor.setByte(JsValueConst.F64);\n        cursor.setF64(value.value);\n        return;\n    }\n\n    if (value.type === JsValueConst.Object) {\n        const list: Array<[string, JsValueType]> = [];\n\n        for (const [key, propertyValue] of Object.entries(value.value)) {\n            list.push([key, propertyValue]);\n        }\n\n        cursor.setByte(JsValueConst.Object);\n        cursor.setU16(list.length);\n\n        for (const [key, propertyValue] of list) {\n            cursor.setString(key);\n            saveToBufferItem(propertyValue, cursor);\n        }\n        return;\n    }\n\n    if (value.type === JsValueConst.Json) {\n        cursor.setByte(JsValueConst.Json);\n        saveJsJsonToBufferItem(value.value, cursor);\n        return;\n    }\n\n    return assertNever(value);\n};\n\nexport const saveToBuffer = (\n    getUint8Memory: () => Uint8Array,\n    alloc: (size: number) => number,\n    value: JsValueType,\n): number => {\n    if (value === undefined) {\n        return 0;\n    }\n\n    const size = getSize(value);\n    const ptr = alloc(size);\n\n    const cursor = new BufferCursor(getUint8Memory, ptr, size);\n    saveToBufferItem(value, cursor);\n\n    if (size !== cursor.getSavedSize()) {\n        console.error({\n            size,\n            savedSize: cursor.getSavedSize(),\n        });\n\n        throw Error('Mismatch between calculated and recorded size');\n    }\n\n    return ptr;\n};\n\nexport const convertFromJsValue = (value: JsValueType): unknown => {\n    if (value === true) {\n        return true;\n    }\n\n    if (value === false) {\n        return false;\n    }\n\n    if (value === null) {\n        return null;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    if (value instanceof Uint8Array) {\n        return value;\n    }\n\n    if (GuardJsValue.isString(value)) {\n        return value;\n    }\n\n    if (Array.isArray(value)) {\n        const newList = [];\n\n        for (const item of value) {\n            newList.push(convertFromJsValue(item));\n        }\n\n        return newList;\n    }\n\n    if (value.type === JsValueConst.U32 || value.type === JsValueConst.I32) {\n        return value.value;\n    }\n\n    if (value.type === JsValueConst.U64 || value.type === JsValueConst.I64 || value.type === JsValueConst.F64) {\n        return value.value;\n    }\n\n    if (value.type === JsValueConst.Object) {\n        const result: Record<string, unknown> = {};\n\n        for (const [key, propertyValue] of Object.entries(value.value)) {\n            result[key] = convertFromJsValue(propertyValue);\n        }\n\n        return result;\n    }\n\n    if (value.type === JsValueConst.Json) {\n        return value.value;\n    }\n\n    return assertNever(value);\n};\n\n//throws an exception when it fails to convert to JsValue\nexport const convertToJsValue = (value: unknown): JsValueType => {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    if (value === true || value === false || value === undefined || value === null) {\n        return value;\n    }\n\n    if (typeof value === 'number') {\n        if (value === (value | 0)) {\n            // is integer\n            if (-(2 ** 31) <= value && value < 2 ** 31) {\n                return {\n                    type: JsValueConst.I32,\n                    value\n                };\n            }\n\n            return {\n                type: JsValueConst.I64,\n                value: BigInt(value)\n            };\n        } else {\n            // is float\n            return {\n                type: JsValueConst.F64,\n                value: value,\n            }\n        }\n    }\n\n    if (typeof value === 'bigint') {\n        return {\n            type: JsValueConst.I64,\n            value\n        };\n    }\n\n    if (value instanceof Uint8Array) {\n        return value;\n    }\n\n    if (typeof value === 'object') {\n        try {\n            const json = convertToJsJson(value);\n            return {\n                type: JsValueConst.Json,\n                value: json\n            };\n        } catch (_error) {\n        }\n\n        const result: Record<string, JsValueType> = {};\n\n        for (const [propName, propValue] of Object.entries(value)) {\n            result[propName] = convertToJsValue(propValue);\n        }\n\n        return {\n            type: JsValueConst.Object,\n            value: result\n        };\n    }\n\n    if (Array.isArray(value)) {\n        try {\n            const list = value.map(convertToJsJson);\n            return {\n                type: JsValueConst.Json,\n                value: list\n            };\n        } catch (_error) {\n            return value.map(convertToJsValue);\n        }\n    }\n\n    console.warn('convertToJsValue', value);\n    throw Error('It is not possible to convert this data to JsValue');\n};\n\n//throws an exception when it fails to convert to JsJson\nexport const convertToJsJson = (value: unknown): JsJsonType => {\n    if (typeof value === 'boolean' || value === null || typeof value === 'number' || typeof value === 'string') {\n        return value;\n    }\n\n    if (Array.isArray(value)) {\n        return value.map(convertToJsJson);\n    }\n\n    if (typeof value === 'object') {\n        const result: Record<string, JsJsonType> = {};\n\n        for (const [propName, propValue] of Object.entries(value)) {\n            result[propName] = convertToJsJson(propValue);\n        }\n\n        return result;\n    }\n\n    console.warn('convertToJsJson', value);\n    throw Error('It is not possible to convert this data to JsJson');\n};\n","import { jsValueDecode, saveToBuffer } from './jsvalue';\nimport { JsValueType } from './jsvalue_types';\n\nexport interface BaseExportType {\n    alloc: (size: number) => number,\n    free: (pointer: number) => void,\n    wasm_callback: (callback_id: bigint, value_ptr: number) => bigint,   //result => pointer: 32bit, size: 32bit\n};\n\nexport interface ModuleControllerType<ExportType extends BaseExportType> {\n    exports: ExportType,\n    decodeArguments: (ptr: number, size: number) => JsValueType,\n    getUint8Memory: () => Uint8Array,\n    wasm_callback: (callback_id: bigint, params: JsValueType) => JsValueType,\n    valueSaveToBuffer: (value: JsValueType) => number,\n}\n\nconst fetchModule = async (wasmBinPath: string, imports: Record<string, WebAssembly.ModuleImports>): Promise<WebAssembly.WebAssemblyInstantiatedSource> => {\n    if (typeof WebAssembly.instantiateStreaming === 'function') {\n        const stream = fetch(wasmBinPath);\n        try {\n            const module = await WebAssembly.instantiateStreaming(stream, imports);\n            return module;\n        } catch (err) {\n            console.warn(\"`WebAssembly.instantiateStreaming` failed. This could happen if your server does not serve wasm with `application/wasm` MIME type, but check the original error too. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", err);\n        }\n    }\n\n    console.info('fetchModule by WebAssembly.instantiate');\n\n    const resp = await fetch(wasmBinPath);\n    const binary = await resp.arrayBuffer();\n    const module_instance = await WebAssembly.instantiate(binary, imports);\n    return module_instance;\n};\n\nexport const wasmInit = async <ImportType extends Record<string, Function>, ExportType extends BaseExportType>(\n    wasmBinPath: string,\n    imports: { mod: ImportType },\n): Promise<ModuleControllerType<ExportType>> => {\n    const module_instance = await fetchModule(wasmBinPath, imports);\n\n    let cacheGetUint8Memory: Uint8Array = new Uint8Array(1);\n\n    const getUint8Memory = () => {\n        if (module_instance.instance.exports.memory instanceof WebAssembly.Memory) {\n            if (cacheGetUint8Memory.buffer !== module_instance.instance.exports.memory.buffer) {\n                cacheGetUint8Memory = new Uint8Array(module_instance.instance.exports.memory.buffer);\n            }\n            return cacheGetUint8Memory;\n        } else {\n            throw Error('Missing memory');\n        }\n    };\n\n    //@ts-expect-error\n    const exports: ExportType = module_instance.instance.exports;\n\n    const decodeArguments = (ptr: number, size: number) => jsValueDecode(getUint8Memory, ptr, size);\n\n    const valueSaveToBuffer = (value: JsValueType): number => saveToBuffer(getUint8Memory, exports.alloc, value);\n\n    const wasm_callback = (callback_id: bigint, value: JsValueType): JsValueType => {\n        const value_ptr = valueSaveToBuffer(value);\n        let result_ptr_and_size = exports.wasm_callback(callback_id, value_ptr);\n\n        if (result_ptr_and_size === 0n) {\n            return undefined;\n        }\n\n        const size = result_ptr_and_size % (2n ** 32n);\n        const ptr = result_ptr_and_size >> 32n;\n\n        if (ptr >= 2n ** 32n) {\n            console.error(`Overflow of a variable with a pointer result_ptr_and_size=${result_ptr_and_size}`);\n        }\n\n        const response = decodeArguments(Number(ptr), Number(size));\n        exports.free(Number(ptr));\n\n        return response;\n    };\n\n    return {\n        exports,\n        decodeArguments,\n        getUint8Memory,\n        wasm_callback,\n        valueSaveToBuffer,\n    };\n};\n","import { JsJsonType } from \"../jsjson\";\n\nexport class Cookies {\n    public get = (cname: string): string => {\n        for (const cookie of document.cookie.split(';')) {\n            if (cookie === \"\") continue;\n\n            const cookieChunk = cookie.trim().split('=');\n\n            if (cookieChunk.length !== 2) {\n                console.warn(`Cookies.get: Incorrect number of cookieChunk => ${cookieChunk.length} in ${cookie}`);\n                continue;\n            }\n\n            const cookieName = cookieChunk[0];\n            const cookieValue = cookieChunk[1];\n\n            if (cookieName === undefined || cookieValue === undefined) {\n                console.warn(`Cookies.get: Broken cookie part => ${cookie}`);\n                continue;\n            }\n\n            if (cookieName === cname) {\n                return decodeURIComponent(cookieValue);\n            }\n        }\n\n        return '';\n    }\n\n    public get_json = (cname: string): JsJsonType => {\n        let cvalue_str = this.get(cname);\n\n        if (cvalue_str.length !== 0) {\n            try {\n                let cookie_value = JSON.parse(cvalue_str);\n                return cookie_value;\n            } catch (e) {\n                console.error!(\"Error deserializing cookie\", e);\n            }\n        }\n        return null\n    }\n\n    public set = (\n        cname: string,\n        cvalue: string,\n        expires_in: bigint,\n    ) => {\n        const cvalueEncoded = cvalue == null ? \"\" : encodeURIComponent(cvalue);\n\n        const d = new Date();\n        d.setTime(d.getTime() + (Number(expires_in) * 1000));\n        let expires = \"expires=\"+ d.toUTCString();\n\n        document.cookie = `${cname}=${cvalueEncoded};${expires};path=/;samesite=strict\"`;\n    }\n\n    public set_json = (\n        cname: string,\n        cvalue: JsJsonType,\n        expires_in: bigint,\n    ) => {\n        let cvalue_str = JSON.stringify(cvalue);\n\n        this.set(cname, cvalue_str, expires_in);\n    }\n}\n","import { ModuleControllerType } from \"../wasm_init\";\nimport { ExportType } from \"../wasm_module\";\n\nexport class Interval {\n    private readonly getWasm: () => ModuleControllerType<ExportType>;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.getWasm = getWasm;\n    }\n\n    public interval_set = (duration: number, callback_id: bigint): ReturnType<typeof setTimeout> => {\n        const timer_id = setInterval(() => {\n            this.getWasm().wasm_callback(callback_id, undefined);\n        }, duration);\n\n        return timer_id;\n    }\n\n    public interval_clear = (timer_id: number) => {\n        clearInterval(timer_id);\n    }\n\n    timeout_set = (duration: number, callback_id: bigint): ReturnType<typeof setTimeout> => {\n        const timeout_id = setTimeout(() => {\n            this.getWasm().wasm_callback(callback_id, undefined);\n        }, duration);\n\n        return timeout_id;\n    }\n\n    timeout_clear = (timer_id: number): void => {\n        clearTimeout(timer_id);\n    }\n}\n","import { ModuleControllerType } from \"../wasm_init\";\nimport { ExportType } from \"../wasm_module\";\n\nexport class HashRouter {\n    private getWasm: () => ModuleControllerType<ExportType>;\n    private callback: Map<bigint, () => void>;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.getWasm = getWasm;\n        this.callback = new Map();\n\n        window.addEventListener(\"hashchange\", this.trigger);\n    }\n\n    private trigger = () => {\n        for (const callback of Array.from(this.callback.values())) {\n            callback();\n        }\n    }\n\n    public add = (callback_id: bigint) => {\n        this.callback.set(callback_id, () => {\n            this.getWasm().wasm_callback(callback_id, this.get());\n        });\n    }\n\n    public remove = (callback_id: bigint) => {\n        this.callback.delete(callback_id);\n    }\n\n    public push = (new_hash: string) => {\n        if (this.get() === new_hash) {\n            return;\n        }\n\n        location.hash = new_hash;\n        this.trigger();\n    }\n\n    public get(): string {\n        return decodeURIComponent(location.hash.substr(1));\n    }\n}\n","import { JsJsonType } from \"../jsjson\";\nimport { JsValueConst } from \"../jsvalue_types\";\nimport { ModuleControllerType } from \"../wasm_init\";\nimport { ExportType } from \"../wasm_module\";\n\nconst getTypeResponse = (contentType: string | null): 'json' | 'text' | 'bin' => {\n    if (contentType === null) {\n        console.info('Missing header content-type');\n        return 'bin';\n    }\n\n    const [type] = contentType.split(\";\");\n\n    if (type === undefined) {\n        console.error('Missing value for content-type');\n        return 'bin';\n    }\n\n    const typeClear = type.toLowerCase().trim();\n\n    if (typeClear === 'application/json') {\n        return 'json';\n    }\n\n    if (typeClear === 'text/plain') {\n        return 'text';\n    }\n\n    console.error(`No match found for content-type=${contentType}`);\n    return 'bin';\n}\n\nconst catchError = async (\n    wasm: ModuleControllerType<ExportType>,\n    callback_id: bigint,\n    response: Response,\n    callbackSuccess: (response: Response) => Promise<void>\n) => {\n    try {\n        await callbackSuccess(response);\n    } catch (error) {\n        console.error('fetch error (2) - json', error);\n        const responseMessage = new String(error).toString();\n\n        wasm.wasm_callback(callback_id, [\n            false,                                      //ok\n            { type: JsValueConst.U32, value: response.status },    //http code\n            responseMessage                             //body (string)\n        ]);\n    }\n};\n\nconst getHeadersAndBody = (headersRecord: Record<string, string>, body: undefined | string | Uint8Array | JsJsonType | undefined): [Headers, string | ArrayBuffer | undefined] => {\n    const headers = new Headers(headersRecord);\n\n    if (body === undefined) {\n        return [\n            headers,\n            undefined\n        ]\n    }\n\n    if (typeof body === 'string') {\n        if (headers.has('content-type') === false) {\n            headers.set('content-type', 'text/plain; charset=utf-8');\n        }\n\n        return [\n            headers,\n            body\n        ];\n    }\n\n\n    if (body instanceof Uint8Array) {\n        if (headers.has('content-type') === false) {\n            headers.set('content-type', 'application/octet-stream');\n        }\n\n        return [\n            headers,\n            body\n        ];\n    }\n\n    //JsJsonType\n    if (headers.has('content-type') === false) {\n        headers.set('content-type', 'application/json; charset=utf-8');\n    }\n\n    return [\n        headers,\n        JSON.stringify(body),\n    ];\n};\n\nexport class Fetch {\n    private readonly getWasm: () => ModuleControllerType<ExportType>;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.getWasm = getWasm;\n    }\n\n    public fetch_send_request = (\n        callback_id: bigint,\n        method: string,\n        url: string,\n        headers: Record<string, string>,\n        body: string | Uint8Array | JsJsonType | undefined,\n    ) => {\n        this.fetch_send_request_inner(callback_id, method, url, headers, body);\n    }\n\n    private fetch_send_request_inner = async (\n        callback_id: bigint,\n        method: string,\n        url: string,\n        headers: Record<string, string>,\n        body: string | Uint8Array | JsJsonType | undefined,\n    ): Promise<void> => {\n        const wasm = this.getWasm();\n\n        const [fetchHeaders, fetchBody] = getHeadersAndBody(headers, body);\n\n        try {\n            const response = await fetch(url, {\n                method,\n                headers: fetchHeaders,\n                body: fetchBody,\n            });\n\n            const contentType = response.headers.get('content-type');\n            const responseType = getTypeResponse(contentType);\n\n            if (responseType === 'json') {\n                catchError(wasm, callback_id, response, async (response) => {\n                    const json = await response.json();\n\n                    wasm.wasm_callback(callback_id, [\n                        true,                                       //ok\n                        { type: JsValueConst.U32, value: response.status },    //http code\n                        {                                           //body (json)\n                            type: JsValueConst.Json,\n                            value: json\n                        }\n                    ]);\n                });\n                return;\n            }\n\n            if (responseType === 'text') {\n                catchError(wasm, callback_id, response, async (response) => {\n                    const text = await response.text();\n\n                    wasm.wasm_callback(callback_id, [\n                        true,                                       //ok\n                        { type: JsValueConst.U32, value: response.status },    //http code\n                        text                                        //body (text)\n                    ]);\n                });\n                return;\n            }\n\n            catchError(wasm, callback_id, response, async (response) => {\n                const text = await response.arrayBuffer();\n                const textUint8Array = new Uint8Array(text);\n\n                wasm.wasm_callback(callback_id, [\n                    true,                                       //ok\n                    { type: JsValueConst.U32, value: response.status },    //http code\n                    textUint8Array                              //body (text)\n                ]);\n            });\n        } catch (err) {\n            console.error('fetch error (1)', err);\n            const responseMessage = new String(err).toString();\n\n            wasm.wasm_callback(callback_id, [\n                false,                                      //ok\n                { type: JsValueConst.U32, value: 0 },                  //http code\n                responseMessage                             //body (string)\n            ]);\n        }\n    }\n}\n","export class EventEmitter<T> {\n    private events: Set<(param: T) => void>;\n\n    constructor() {\n        this.events = new Set()\n    }\n\n    on(callback: (param: T) => void) {\n        let isActive = true;\n\n        const onExec = (param: T) => {\n            if (isActive) {\n                callback(param);\n            }\n        };\n\n        this.events.add(onExec);\n\n        return () => {\n            isActive = false;\n            this.events.delete(onExec);\n        };\n    }\n\n    trigger(param: T) {\n        const eventsCopy = Array.from(this.events.values())\n\n        for (const itemCallbackToRun of eventsCopy) {\n            try {\n                itemCallbackToRun(param);\n            } catch (err) {\n                console.error(err);\n            }\n        }\n    }\n\n    get size(): number {\n        return this.events.size;\n    }\n}\n","type ResolveFn<T> = (data: T) => void;\ntype RejectFn = (err: unknown) => void;\n\ninterface PromiseResolveReject<T> {\n    readonly resolve: (value: T) => void,\n    readonly reject: (err: unknown) => void,\n};\n\nconst createPromiseValue = <T>(): [PromiseResolveReject<T>, Promise<T>] => {\n    let resolve: ResolveFn<T> | null = null;\n    let reject: RejectFn | null = null;\n\n    const promise: Promise<T> = new Promise((localResolve: ResolveFn<T>, localReject: RejectFn) => {\n        resolve = localResolve;\n        reject = localReject;\n    });\n\n    if (resolve === null) {\n        throw Error('createPromiseValue - resolve is null');\n    }\n\n    if (reject === null) {\n        throw Error('createPromiseValue - reject is null');\n    }\n\n    const promiseValue = {\n        resolve,\n        reject,\n    };\n\n    return [promiseValue, promise];\n};\n\nexport class PromiseBoxRace<T> {\n    private promiseResolveReject: PromiseResolveReject<T> | null = null;\n    readonly promise: Promise<T>;\n\n    constructor() {\n        const [promiseResolveReject, promise] = createPromiseValue<T>();\n\n        this.promiseResolveReject = promiseResolveReject;\n        this.promise = promise;\n    }\n\n    resolve = (value: T) => {\n        const promiseResolveReject = this.promiseResolveReject;\n        this.promiseResolveReject = null;\n\n        if (promiseResolveReject === null) {\n            return;\n        }\n\n        promiseResolveReject.resolve(value);\n    }\n\n    reject = (err?: unknown) => {\n        const promiseResolveReject = this.promiseResolveReject;\n        this.promiseResolveReject = null;\n\n        if (promiseResolveReject === null) {\n            return;\n        }\n\n        promiseResolveReject.reject(err);\n    }\n\n    isFulfilled = (): boolean => {\n        return this.promiseResolveReject === null;\n    }\n}\n","import { EventEmitter } from \"./event_emiter\";\nimport { PromiseBoxRace } from \"./promise\";\n\nconst timeout = async (timeout: number): Promise<void> => {\n    return new Promise((resolve: (data: void) => void) => {\n        setTimeout(resolve, timeout);\n    });\n};\n\n\nconst reconnectDelay = async (label: string, timeout_retry: number): Promise<void> => {\n    console.info(`${label} wait ${timeout_retry}ms`);\n    await timeout(timeout_retry);\n    console.info(`${label} go forth`);\n};\n\nexport type SocketEventType = {\n    type: 'message',\n    message: string,\n} | {\n    type: 'socket',\n    socket: SocketConnection\n} | {\n    type: 'close',\n};\n\nexport type OnMessageType = (message: SocketEventType) => void;\nexport type UnsubscribeFnType = () => void;\n\ninterface OpenSocketResult {\n    socket: Promise<SocketConnection | null>,\n    done: Promise<void>,\n}\n\nexport interface SocketConnectionController {\n    send: (message: string) => void,\n    dispose: UnsubscribeFnType\n}\n\nclass LogContext {\n    public constructor(private host: string) {}\n    public formatLog = (message: string): string => `Socket ${this.host} ==> ${message}`;\n}\nexport class SocketConnection {\n    private readonly eventMessage: EventEmitter<string>;\n    public readonly close: () => void;\n    public readonly send: (message: string) => void;\n\n    private constructor(\n        close: () => void,\n        send: (message: string) => void,\n    ) {\n        this.eventMessage = new EventEmitter();\n        this.close = close;\n        this.send = send;\n    }\n\n    private static connect(\n        log: LogContext,\n        host: string,\n        timeout: number,\n    ): OpenSocketResult {\n        const result = new PromiseBoxRace<SocketConnection | null>();\n        const done = new PromiseBoxRace<void>();\n        const socket = new WebSocket(host);\n        let isClose: boolean = false;\n\n        console.info(log.formatLog('starting ...'));\n\n        const closeSocket = (): void => {\n            if (isClose) {\n                return;\n            }\n\n            console.info(log.formatLog('close'));\n\n            isClose = true;\n            result.resolve(null);\n            done.resolve();\n            socket.close();\n        };\n\n\n        const socketConnection = new SocketConnection(\n            closeSocket,\n            (message: string) => {\n                if (isClose) {\n                    return;\n                }\n                socket.send(message);\n            }\n        );\n\n        setTimeout(() => {\n            if (result.isFulfilled() === false) {\n                console.error(log.formatLog(`timeout (${timeout}ms)`));\n                closeSocket();\n            }\n        }, timeout);\n\n        const onOpen = (): void => {\n            console.info(log.formatLog('open'));\n            result.resolve(socketConnection);\n        };\n\n        const onError = (error: Event): void => {\n            console.error(log.formatLog('error'), error);\n            closeSocket();\n        };\n\n        const onMessage = (event: MessageEvent): void => {\n            if (isClose) {\n                return;\n            }\n\n            const dataRaw = event.data;\n\n            if (typeof dataRaw === 'string') {\n                socketConnection.eventMessage.trigger(dataRaw);\n                return;\n            }\n\n            console.error(log.formatLog('onMessage - expected string'), dataRaw);\n        };\n\n        socket.addEventListener('open', onOpen);\n        socket.addEventListener('error', onError);\n        socket.addEventListener('close', closeSocket);\n        socket.addEventListener('message', onMessage);\n\n        return {\n            socket: result.promise,\n            done: done.promise\n        };\n    }\n\n    public static startSocket(\n        host: string,\n        timeout_connection: number,\n        timeout_retry: number,\n        onMessage: OnMessageType,\n    ): SocketConnectionController {\n        let isConnect: boolean = true;\n        let socketConnection: SocketConnection | null = null;\n\n        const log = new LogContext(host);\n\n        (async (): Promise<void> => {\n            while (isConnect) {\n                const openSocketResult = SocketConnection.connect(log, host, timeout_connection);\n\n                const socket = await openSocketResult.socket;\n\n                if (socket === null) {\n                    await reconnectDelay(log.formatLog('reconnect after error'), timeout_retry);\n                    continue;\n                }\n\n                socketConnection = socket;\n                onMessage({\n                    type: 'socket',\n                    socket\n                });\n\n                socket.eventMessage.on(message => {\n                    onMessage({\n                        type: 'message',\n                        message\n                    });\n                });\n\n                await openSocketResult.done;\n\n                onMessage({\n                    type: 'close'\n                });\n\n                if (!isConnect) {\n                    console.info(log.formatLog('disconnect (1)'));\n                    return;\n                }\n\n                await reconnectDelay(log.formatLog('reconnect after close'), timeout_retry);\n            }\n\n            console.info(log.formatLog('disconnect (2)'));\n        })().catch((error) => {\n            console.error(error);\n        });\n\n        return {\n            send: (message: string): void => {\n                if (socketConnection === null) {\n                    console.error('send fail - missing connection', message);\n                } else {\n                    socketConnection.send(message);\n                }\n            },\n            dispose: (): void => {\n                isConnect = false;\n                socketConnection?.close();\n            }\n        };\n    }\n}\n","import { ModuleControllerType } from \"../../wasm_init\";\nimport { ExportType } from \"../../wasm_module\";\nimport { SocketConnection, SocketConnectionController } from \"./connection\";\n\n\nconst assertNeverMessage = (data: never): never => {\n    console.error(data);\n    throw Error('unknown message');\n};\n\nexport class DriverWebsocket {\n    private getWasm: () => ModuleControllerType<ExportType>;\n    private readonly controllerList: Map<bigint, SocketConnectionController>;\n    private readonly socket: Map<bigint, SocketConnection>;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.getWasm = getWasm;\n        this.controllerList = new Map();\n        this.socket = new Map();\n    }\n\n    public websocket_register_callback = (\n        host: string,\n        callback_id: bigint,\n    ) => {\n        const wasm = this.getWasm();\n\n        let controller = SocketConnection.startSocket(\n            host,\n            5000,                   //timeout connection\n            3000,                   //timeout reconnection\n            (message) => {\n\n                if (this.controllerList.has(callback_id) === false) {\n                    return;\n                }\n\n                if (message.type === 'socket') {\n                    this.socket.set(callback_id, message.socket);\n                    wasm.wasm_callback(callback_id, true);\n                    return;\n                }\n\n                if (message.type === 'message') {\n                    wasm.wasm_callback(callback_id, message.message);\n                    return;\n                }\n\n                if (message.type === 'close') {\n                    this.socket.delete(callback_id);\n                    wasm.wasm_callback(callback_id, false);\n                    return;\n                }\n\n                return assertNeverMessage(message);\n            }\n        );\n\n        this.controllerList.set(callback_id, controller);\n    }\n\n    public websocket_unregister_callback = (callback_id: bigint) => {\n        const controller = this.controllerList.get(callback_id);\n\n        if (controller === undefined) {\n            console.error('Expected controller');\n            return;\n        }\n\n        controller.dispose();\n        this.controllerList.delete(callback_id);\n    }\n\n    public websocket_send_message = (\n        callback_id: bigint,\n        message: string,\n    ) => {\n        const socket = this.socket.get(callback_id);\n\n        if (socket === undefined) {\n            console.error(`Missing socket connection for callback_id=${callback_id}`);\n        } else {\n            socket.send(message);\n        }\n    }\n}\n","type NodeType = Element | Comment | Text;\nexport class MapNodes {\n    private data: Map<number, NodeType>;\n    private initNodes: Array<ChildNode> | null;\n    private style: HTMLStyleElement;\n\n    constructor() {\n        this.data = new Map();\n\n        this.initNodes = [\n            ...this.get_root_head().childNodes,\n            ...this.get_root_body().childNodes,\n        ];\n\n        this.style = document.createElement('style');\n        this.get_root_head().appendChild(this.style);\n    }\n\n    private get_root_html(): Element {\n        return document.documentElement;\n    }\n\n    private get_root_head(): Element {\n        return document.head;\n    }\n\n    private get_root_body(): Element {\n        return document.body;\n    }\n\n    public set(id: number, value: NodeType) {\n        if (id === 1 || id === 2 || id === 3) {\n            //ignore\n        } else {\n            this.data.set(id, value);\n        }\n    }\n\n    public get_any_option(id: number): NodeType | undefined {\n        if (id === 1) {\n            return this.get_root_html();\n        }\n\n        if (id === 2) {\n            return this.get_root_head();\n        }\n\n        if (id === 3) {\n            return this.get_root_body();\n        }\n\n        return this.data.get(id);\n    }\n\n    public get_any(label: string, id: number): NodeType {\n        const item = this.get_any_option(id);\n\n        if (item === undefined) {\n            throw Error(`${label} -> item not found=${id}`);\n        }\n\n        return item;\n    }\n\n    public get(label: string, id: number): NodeType {\n        const item = this.get_any_option(id);\n\n        if (item === undefined) {\n            throw new Error(`${label}->get: Item id not found = ${id}`);\n        }\n        return item;\n    }\n\n    public get_node_element(label: string, id: number): HTMLElement {\n        const node = this.get(label, id);\n        if (node instanceof HTMLElement) {\n            return node;\n        } else {\n            throw Error(`Expected id=${id} as HTMLElement`);\n        }\n    }\n\n    public get_node(label: string, id: number): Element {\n        const node = this.get(label, id);\n        if (node instanceof Element) {\n            return node;\n        } else {\n            throw Error(`Expected id=${id} as Element`);\n        }\n    }\n\n    public get_text(label: string, id: number): Text {\n        const node = this.get(label, id);\n        if (node instanceof Text) {\n            return node;\n        } else {\n            throw Error(`Expected id=${id} as Text`);\n        }\n    }\n\n    public get_comment(label: string, id: number): Comment {\n        const node = this.get(label, id);\n        if (node instanceof Comment) {\n            return node;\n        } else {\n            throw Error(`Expected id=${id} as Comment`);\n        }\n    }\n\n    public delete(label: string, id: number): NodeType {\n        const item = this.get_any_option(id);\n        this.data.delete(id);\n\n        if (item === undefined) {\n            throw new Error(`${label}->delete: Item id not found = ${id}`);\n        }\n\n        return item;\n    }\n\n    public insert_css(selector: string | null, value: string) {\n        if (selector !== null) {\n            // Add autocss styles\n            const content = document.createTextNode(`\\n${selector} { ${value} }`);\n            this.style.appendChild(content);\n        } else {\n            // Add bundle (i.e. a tailwind bundle)\n            const content = document.createTextNode(`\\n${value}`);\n            this.style.appendChild(content);\n        }\n    }\n\n    public removeInitNodes() {\n        const initNodes = this.initNodes;\n        this.initNodes = null;\n\n        if (initNodes === null) {\n            return;\n        }\n\n        for (const node of initNodes) {\n            node.remove();\n        }\n    }\n\n    public insert_before(parent: number, child: number, ref_id: number | null | undefined) {\n        const parentNode = this.get(\"insert_before\", parent);\n        const childNode = this.get_any(\"insert_before child\", child);\n\n        if (ref_id === null || ref_id === undefined) {\n            parentNode.insertBefore(childNode, null);\n        } else {\n            const ref_node = this.get_any('insert_before ref', ref_id);\n            parentNode.insertBefore(childNode, ref_node);\n        }\n\n        if (parentNode === this.get_root_head()) {\n            //we make sure that the automatically generated styles are always the last element of the head\n            this.get_root_head().appendChild(this.style);\n        }\n    }\n}\n","import { ExportType } from \"../../wasm_module\";\nimport { GuardJsValue } from \"../../guard\";\nimport { HistoryLocation } from \"../historyLocation\";\nimport { MapNodes } from \"./map_nodes\";\nimport { ModuleControllerType } from \"../../wasm_init\";\n\ninterface FileItemType {\n    name: string,\n    data: Uint8Array,\n}\n\nconst createElement = (name: string): Element => {\n    if (name == \"path\" || name == \"svg\") {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", name);\n    } else {\n        return document.createElement(name);\n    }\n}\n\ntype CommandType = {\n    type: 'create_node',\n    id: number,\n    name: string,\n} | {\n    type: 'create_text',\n    id: number,\n    value: string\n} | {\n    type: 'update_text',\n    id: number,\n    value: string\n} | {\n    type: 'set_attr',\n    id: number,\n    name: string,\n    value: string\n} | {\n    type: 'remove_attr',\n    id: number,\n    name: string\n} | {\n    type: 'remove_node',\n    id: number,\n} | {\n    type: 'remove_text',\n    id: number,\n} | {\n    type: 'insert_before',\n    parent: number,\n    child: number,\n    ref_id: number | null,\n} | {\n    type: 'insert_css',\n    selector: string | null,\n    value: string\n} | {\n    type: 'create_comment',\n    id: number,\n    value: string\n} | {\n    type: 'remove_comment',\n    id: number,\n} | {\n    type: 'callback_add',\n    id: number,\n    event_name: string,\n    callback_id: number,\n} | {\n    type: 'callback_remove',\n    id: number,\n    event_name: string,\n    callback_id: number,\n};\n\nconst assertNeverCommand = (data: never): never => {\n    console.error(data);\n    throw Error('unknown command');\n};\n\nexport class DriverDom {\n    private historyLocation: HistoryLocation;\n    private readonly getWasm: () => ModuleControllerType<ExportType>;\n    public readonly nodes: MapNodes;\n    private callbacks: Map<bigint, (data: Event) => void>;\n\n    public constructor(historyLocation: HistoryLocation, getWasm: () => ModuleControllerType<ExportType>) {\n        this.historyLocation = historyLocation;\n        this.getWasm = getWasm;\n        this.nodes = new MapNodes();\n        this.callbacks = new Map();\n\n        document.addEventListener('dragover', (ev): void => {\n            // console.log('File(s) in drop zone');\n            ev.preventDefault();\n        });\n    }\n\n    public debugNodes(...ids: Array<number>) {\n        const result: Record<number, unknown> = {};\n        for (const id of ids) {\n            const value = this.nodes.get_any_option(id);\n            result[id] = value;\n        }\n        console.info('debug nodes', result);\n    }\n\n    private create_node(id: number, name: string) {\n        const node = createElement(name);\n        this.nodes.set(id, node);\n\n        if (name.toLowerCase().trim() === 'a') {\n            node.addEventListener('click', (e) => {\n                let href = node.getAttribute('href');\n                if (href === null) {\n                    return;\n                }\n\n                if (href.startsWith('#') || href.startsWith('http://') || href.startsWith('https://') || href.startsWith('//')) {\n                    return;\n                }\n\n                e.preventDefault();\n                this.historyLocation.push(href);\n                window.scrollTo(0, 0);\n            })\n        }\n    }\n\n    private set_attribute(id: number, name: string, value: string) {\n        const node = this.nodes.get_node(\"set_attribute\", id);\n        node.setAttribute(name, value);\n\n        if (name == \"value\") {\n            if (node instanceof HTMLInputElement) {\n                node.value = value;\n                return;\n            }\n\n            if (node instanceof HTMLTextAreaElement) {\n                node.value = value;\n                node.defaultValue = value;\n                return;\n            }\n        }\n    }\n\n    private remove_attribute(id: number, name: string) {\n        const node = this.nodes.get_node(\"remove_attribute\", id);\n        node.removeAttribute(name);\n\n        if (name == \"value\") {\n            if (node instanceof HTMLInputElement) {\n                node.value = \"\";\n                return;\n            }\n\n            if (node instanceof HTMLTextAreaElement) {\n                node.value = \"\";\n                node.defaultValue = \"\";\n                return;\n            }\n        }\n    }\n\n    private remove_node(id: number) {\n        const node = this.nodes.delete(\"remove_node\", id);\n        node.remove();\n    }\n\n    private create_text(id: number, value: string) {\n        const text = document.createTextNode(value);\n        this.nodes.set(id, text);\n    }\n\n    private remove_text(id: number) {\n        const text = this.nodes.delete(\"remove_node\", id);\n        text.remove();\n    }\n\n    private update_text(id: number, value: string) {\n        const text = this.nodes.get_text(\"set_attribute\", id);\n        text.textContent = value;\n    }\n\n    private callback_click(event: Event, callback_id: bigint) {\n        event.preventDefault();\n        let click_event = this.getWasm().wasm_callback(callback_id, undefined);\n\n        if (GuardJsValue.isJsObject(click_event)) {\n            let value = click_event.value;\n            if (value !== null) {\n                if (value['stop_propagation'] === true) {\n                    event.stopPropagation();\n                }\n                if (value['prevent_default'] === true) {\n                    event.preventDefault();\n                }\n            }\n        }\n    }\n\n    private callback_submit(event: Event, callback_id: bigint) {\n        event.preventDefault();\n        this.getWasm().wasm_callback(callback_id, undefined);\n    }\n\n    private callback_input(event: Event, callback_id: bigint) {\n        const target = event.target;\n\n        if (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement) {\n            this.getWasm().wasm_callback(callback_id, target.value);\n            return;\n        }\n\n        console.warn('event input ignore', target);\n    }\n\n    private callback_change(event: Event, callback_id: bigint) {\n        const target = event.target;\n\n        if (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement) {\n            this.getWasm().wasm_callback(callback_id, target.value);\n            return;\n        }\n\n        console.warn('event input ignore', target);\n    }\n\n    private callback_blur(_event: Event, callback_id: bigint) {\n        this.getWasm().wasm_callback(callback_id, undefined);\n    }\n\n    private callback_mousedown(event: Event, callback_id: bigint) {\n        if (this.getWasm().wasm_callback(callback_id, undefined)) {\n            event.preventDefault()\n        }\n    }\n\n    private callback_mouseup(event: Event, callback_id: bigint) {\n        if (this.getWasm().wasm_callback(callback_id, undefined)) {\n            event.preventDefault()\n        }\n    }\n\n    private callback_mouseenter(_event: Event, callback_id: bigint) {\n        this.getWasm().wasm_callback(callback_id, undefined);\n    }\n\n    private callback_mouseleave(_event: Event, callback_id: bigint) {\n        this.getWasm().wasm_callback(callback_id, undefined);\n    }\n\n    private callback_drop(event: Event, callback_id: bigint) {\n        event.preventDefault();\n\n        if (event instanceof DragEvent) {\n            if (event.dataTransfer === null) {\n                console.error('dom -> drop -> dataTransfer null');\n            } else {\n                const files: Array<Promise<FileItemType>> = [];\n\n                for (let i = 0; i < event.dataTransfer.items.length; i++) {\n                    const item = event.dataTransfer.items[i];\n\n                    if (item === undefined) {\n                        console.error('dom -> drop -> item - undefined');\n                    } else {\n                        const file = item.getAsFile();\n\n                        if (file === null) {\n                            console.error(`dom -> drop -> index:${i} -> It's not a file`);\n                        } else {\n                            files.push(file\n                                .arrayBuffer()\n                                .then((data): FileItemType => ({\n                                    name: file.name,\n                                    data: new Uint8Array(data),\n                                }))\n                            );\n                        }\n                    }\n                }\n\n                if (files.length) {\n                    Promise.all(files).then((files) => {\n                        const params = [];\n\n                        for (const file of files) {\n                            params.push([\n                                file.name,\n                                file.data,\n                            ]);\n                        }\n\n                        this.getWasm().wasm_callback(callback_id, [params]);\n                    }).catch((error) => {\n                        console.error('callback_drop -> promise.all -> ', error);\n                    });\n                } else {\n                    console.error('No files to send');\n                }\n            }\n        } else {\n            console.warn('event drop ignore', event);\n        }\n    }\n\n    private callback_keydown(event: Event, callback_id: bigint) {\n        if (event instanceof KeyboardEvent) {\n            const result = this.getWasm().wasm_callback(callback_id, [\n                event.key,\n                event.code,\n                event.altKey,\n                event.ctrlKey,\n                event.shiftKey,\n                event.metaKey\n            ]);\n\n            if (result === true) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            return;\n        }\n\n        console.warn('keydown ignore', event);\n    }\n\n    private callback_load(event: Event, callback_id: bigint) {\n        event.preventDefault();\n        this.getWasm().wasm_callback(callback_id, undefined);\n    }\n\n    private callback_add(id: number, event_name: string, callback_id: bigint) {\n        const callback = (event: Event) => {\n            if (event_name === 'click') {\n                return this.callback_click(event, callback_id);\n            }\n\n            if (event_name === 'submit') {\n                return this.callback_submit(event, callback_id);\n            }\n\n            if (event_name === 'input') {\n                return this.callback_input(event, callback_id);\n            }\n\n            if (event_name === 'change') {\n                return this.callback_change(event, callback_id);\n            }\n\n            if (event_name === 'blur') {\n                return this.callback_blur(event, callback_id);\n            }\n\n            if (event_name === 'mousedown') {\n                return this.callback_mousedown(event, callback_id);\n            }\n\n            if (event_name === 'mouseup') {\n                return this.callback_mouseup(event, callback_id);\n            }\n\n            if (event_name === 'mouseenter') {\n                return this.callback_mouseenter(event, callback_id);\n            }\n\n            if (event_name === 'mouseleave') {\n                return this.callback_mouseleave(event, callback_id);\n            }\n\n            if (event_name === 'keydown') {\n                return this.callback_keydown(event, callback_id);\n            }\n\n            if (event_name === 'hook_keydown') {\n                return this.callback_keydown(event, callback_id);\n            }\n\n            if (event_name === 'drop') {\n                return this.callback_drop(event, callback_id);\n            }\n\n            if (event_name === 'load') {\n                return this.callback_load(event, callback_id);\n            }\n\n            console.error(`No support for the event ${event_name}`);\n        };\n\n        if (this.callbacks.has(callback_id)) {\n            console.error(`There was already a callback added with the callback_id=${callback_id}`);\n            return;\n        }\n\n        this.callbacks.set(callback_id, callback);\n\n        if (event_name === 'hook_keydown') {\n            document.addEventListener('keydown', callback, false);\n        } else {\n            const node = this.nodes.get('callback_add', id);\n            node.addEventListener(event_name, callback, false);\n        }\n    }\n\n    private callback_remove(id: number, event_name: string, callback_id: bigint) {\n        const callback = this.callbacks.get(callback_id);\n        this.callbacks.delete(callback_id);\n\n        if (callback === undefined) {\n            console.error(`The callback is missing with the id=${callback_id}`);\n            return;\n        }\n\n        if (event_name === 'hook_keydown') {\n            document.removeEventListener('keydown', callback);\n        } else {\n            const node = this.nodes.get('callback_remove', id);\n            node.removeEventListener(event_name, callback);\n        }\n    }\n\n    public dom_bulk_update = (commands: Array<CommandType>) => {\n        const setFocus: Set<number> = new Set();\n\n        for (const command of commands) {\n            try {\n                this.bulk_update_command(command);\n            } catch (error) {\n                console.error('bulk_update - item', error, command);\n            }\n\n            if (command.type === 'set_attr' && command.name.toLocaleLowerCase() === 'autofocus') {\n                setFocus.add(command.id);\n            }\n        }\n\n        if (setFocus.size > 0) {\n            setTimeout(() => {\n                for (const id of setFocus) {\n                    const node = this.nodes.get_node_element(`set focus ${id}`, id);\n                    node.focus();\n                }\n            }, 0);\n        }\n\n        this.nodes.removeInitNodes();\n    }\n\n    private bulk_update_command(command: CommandType) {\n        if (command.type === 'remove_node') {\n            this.remove_node(command.id);\n            return;\n        }\n\n        if (command.type === 'insert_before') {\n            this.nodes.insert_before(command.parent, command.child, command.ref_id === null ? null : command.ref_id);\n            return;\n        }\n\n        if (command.type === 'create_node') {\n            this.create_node(command.id, command.name);\n            return;\n        }\n\n        if (command.type === 'create_text') {\n            this.create_text(command.id, command.value);\n            return;\n        }\n\n        if (command.type === 'update_text') {\n            this.update_text(command.id, command.value);\n            return;\n        }\n\n        if (command.type === 'set_attr') {\n            this.set_attribute(command.id, command.name, command.value);\n            return;\n        }\n\n        if (command.type === 'remove_attr') {\n            this.remove_attribute(command.id, command.name);\n            return;\n        }\n\n        if (command.type === 'remove_text') {\n            this.remove_text(command.id);\n            return;\n        }\n\n        if (command.type === 'insert_css') {\n            this.nodes.insert_css(command.selector, command.value);\n            return;\n        }\n\n        if (command.type === 'create_comment') {\n            const comment = document.createComment(command.value);\n            this.nodes.set(command.id, comment);\n            return;\n        }\n\n        if (command.type === 'remove_comment') {\n            const comment = this.nodes.delete(\"remove_comment\", command.id);\n            comment.remove();\n            return;\n        }\n\n        if (command.type === 'callback_add') {\n            this.callback_add(command.id, command.event_name, BigInt(command.callback_id));\n            return;\n        }\n\n        if (command.type === 'callback_remove') {\n            this.callback_remove(command.id, command.event_name, BigInt(command.callback_id));\n            return;\n        }\n\n        return assertNeverCommand(command);\n    }\n}\n","import { ModuleControllerType } from \"../wasm_init\";\nimport { ExportType } from \"../wasm_module\";\nexport class HistoryLocation {\n    private getWasm: () => ModuleControllerType<ExportType>;\n    private callback: Map<bigint, () => void>;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.getWasm = getWasm;\n        this.callback = new Map();\n\n        window.addEventListener(\"popstate\", this.trigger);\n    }\n\n    private trigger = () => {\n        for (const callback of Array.from(this.callback.values())) {\n            callback();\n        }\n    }\n\n    public add = (callback_id: bigint) => {\n        this.callback.set(callback_id, () => {\n            this.getWasm().wasm_callback(callback_id, this.get());\n        });\n    }\n\n    public remove = (callback_id: bigint) => {\n        this.callback.delete(callback_id);\n    }\n\n    public push = (url: string) => {\n        if (this.get() === url) {\n            return;\n        }\n\n        window.history.pushState(null, '', url);\n        this.trigger();\n    }\n\n    public replace = (url: string) => {\n        if (this.get() === url) {\n            return;\n        }\n\n        window.history.replaceState(null, '', url);\n        this.trigger();\n    }\n\n    public get(): string {\n        return window.location.pathname + window.location.search + window.location.hash;\n    }\n}\n","import { ModuleControllerType } from \"./wasm_init\";\nimport { ExportType } from \"./wasm_module\";\nimport { Cookies } from \"./api_browser/cookies\";\nimport { Interval } from \"./api_browser/interval\";\nimport { HashRouter } from \"./api_browser/hashrouter\";\nimport { Fetch } from \"./api_browser/fetch\";\nimport { DriverWebsocket } from \"./api_browser/websocket/websocket\";\nimport { DriverDom } from \"./api_browser/dom/dom\";\nimport { HistoryLocation } from \"./api_browser/historyLocation\";\n\nexport class ApiBrowser {\n    public readonly cookie: Cookies;\n    public readonly interval: Interval;\n    public readonly hashRouter: HashRouter;\n    public readonly historyLocation: HistoryLocation;\n    public readonly fetch: Fetch;\n    public readonly websocket: DriverWebsocket;\n    public readonly dom: DriverDom;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.cookie = new Cookies();\n        this.interval = new Interval(getWasm);\n        this.hashRouter = new HashRouter(getWasm);\n        this.historyLocation = new HistoryLocation(getWasm);\n        this.fetch = new Fetch(getWasm);\n        this.websocket = new DriverWebsocket(getWasm);\n        this.dom = new DriverDom(this.historyLocation, getWasm);\n    }\n\n    public getRandom = (min: number, max: number): number => {\n        const range = max - min + 1;\n        let result = Math.floor(Math.random() * range);\n        return min + result;\n    }\n\n    public isBrowser = (): boolean => {\n        return true;\n    }\n\n    public get_env = (name: string): string | null => {\n        return document.documentElement.getAttribute(`data-env-${name}`);\n    }\n\n    public getTimezoneOffset = (): number => {\n        return new Date().getTimezoneOffset()\n    }\n}\n","import { ApiBrowser } from \"./api_browser\";\nimport { convertFromJsValue, convertToJsValue } from \"./jsvalue\";\nimport { JsValueType } from \"./jsvalue_types\";\nimport { GuardJsValue } from './guard';\nimport { MapNodes } from \"./api_browser/dom/map_nodes\";\n\nexport class JsNode {\n    private api: ApiBrowser;\n    private nodes: MapNodes;\n    private wsk: unknown;\n\n    public constructor(\n        api: ApiBrowser,\n        nodes: MapNodes,\n        wsk: unknown\n    ) {\n        this.api = api;\n        this.nodes = nodes;\n        this.wsk = wsk;\n    }\n\n    getByProperty(path: Array<JsValueType>, property: string): JsNode | null {\n        try {\n            //@ts-expect-error\n            const nextCurrentPointer = this.wsk[property];\n            return new JsNode(this.api, this.nodes, nextCurrentPointer);\n        } catch (error) {\n            console.error('A problem with get', {\n                path,\n                property,\n                error\n            });\n            return null;\n        }\n    }\n\n    public toValue(): JsValueType {\n        return convertToJsValue(this.wsk);\n    }\n\n    public next(path: Array<JsValueType>, command: JsValueType): JsNode | null {\n        if (Array.isArray(command)) {\n            const [commandName, ...args] = command;\n\n            if (commandName === 'api') {\n                return this.nextApi(path, args);\n            }\n\n            if (commandName === 'root') {\n                return this.nextRoot(path, args);\n            }\n\n            if (commandName === 'get') {\n                return this.nextGet(path, args);\n            }\n\n            if (commandName === 'set') {\n                return this.nextSet(path, args);\n            }\n\n            if (commandName === 'call') {\n                return this.nextCall(path, args);\n            }\n\n            if (commandName === 'get_props') {\n                return this.nextGetProps(path, args);\n            }\n\n            console.error('JsNode.next - wrong commandName', commandName);\n            return null;\n        }\n\n        console.error('JsNode.next - array was expected', { path, command });\n        return null;\n    }\n\n    nextApi(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        if (args.length === 0) {\n            return new JsNode(this.api, this.nodes, this.api);\n        }\n\n        console.error('nextApi: wrong parameter', {path, args});\n        return null;\n    }\n\n    nextRoot(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        const [firstName, ...rest] = args;\n\n        if (GuardJsValue.isString(firstName) && rest.length === 0) {\n            if (firstName === 'window') {\n                return new JsNode(this.api, this.nodes, window);\n            }\n\n            if (firstName === 'document') {\n                return new JsNode(this.api, this.nodes, document);\n            }\n\n            console.error(`JsNode.nextRoot: Global name not found -> ${firstName}`, {path, args});\n            return null;\n        }\n\n        if ((GuardJsValue.isNumber(firstName) || GuardJsValue.isBigInt(firstName)) && rest.length === 0) {\n            const domId = Number(firstName.value);\n\n            const node = this.nodes.get_any_option(domId);\n\n            if (node !== undefined) {\n                return new JsNode(this.api, this.nodes, node);\n            }\n\n            console.error(`JsNode.nextRoot: No node with id=${domId}`, {path, args});\n            return null;\n        }\n\n        console.error('JsNode.nextRoot: wrong parameter', {path, args});\n        return null;\n    }\n\n    nextGet(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        const [property, ...getArgs] = args;\n\n        if (GuardJsValue.isString(property) && getArgs.length === 0) {\n            return this.getByProperty(path, property);\n        }\n\n        console.error('JsNode.nextGet - wrong parameters', { path, args });\n        return null;\n    }\n\n    nextSet(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        const [property, value, ...setArgs] = args;\n\n        if (GuardJsValue.isString(property) && setArgs.length === 0) {\n            try {\n                //@ts-expect-error\n                this.wsk[property] = convertFromJsValue(value);\n                return new JsNode(this.api, this.nodes, undefined);\n            } catch (error) {\n                console.error('A problem with set', {\n                    path,\n                    property,\n                    error\n                });\n                return null;\n            }\n        }\n\n        console.error('JsNode.nextSet - wrong parameters', { path, args });\n        return null;\n    }\n\n    nextCall(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        const [property, ...callArgs] = args;\n\n        if (GuardJsValue.isString(property)) {\n            try {\n                let paramsJs = callArgs.map(convertFromJsValue);\n                //@ts-expect-error\n                const result = this.wsk[property](...paramsJs);\n                return new JsNode(this.api, this.nodes, result);\n            } catch (error) {\n                console.error('A problem with call', {\n                    path,\n                    property,\n                    error\n                });\n                return null;\n            }\n        }\n\n        console.error('JsNode.nextCall - wrong parameters', { path, args });\n        return null;\n    }\n\n    nextGetProps(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        const result: Record<string, JsValueType> = {};\n\n        for (const property of args) {\n            if (GuardJsValue.isString(property)) {\n                const value = this.getByProperty(path, property);\n                if (value === null) {\n                    return null;\n                }\n\n                result[property] = value.toValue();\n            } else {\n                console.error('JsNode.nextGetProps - wrong parameters', { path, args, property });\n                return null;\n            }\n        }\n\n        return new JsNode(this.api, this.nodes, result);\n    }\n}\n","import { wasmInit, ModuleControllerType } from './wasm_init';\nimport { ApiBrowser as ApiBrowser } from './api_browser';\nimport { JsNode } from './js_node';\n\n//Number -> u32 or i32\n//BigInt -> u64 or i64\n\nexport type ImportType = {\n    panic_message: (ptr: number, length: number) => void,\n    //call from rust\n    dom_access: (ptr: number, size: number) => number,\n}\n\nexport type ExportType = {\n    alloc: (size: number) => number,\n    free: (pointer: number) => void,\n    wasm_callback: (callback_id: bigint, value_ptr: number) => bigint,  //result => pointer: 32bit, size: 32bit\n    vertigo_entry_function: (major: number, minor: number) => void,\n}\n\nexport class WasmModule {\n    private readonly wasm: ModuleControllerType<ExportType>;\n\n    private constructor(\n        wasm: ModuleControllerType<ExportType>,\n    ) {\n        this.wasm = wasm;\n    }\n\n    public vertigo_entry_function(major: number, minor: number) {\n        this.wasm.exports.vertigo_entry_function(major, minor);\n    }\n\n    public static async create(wasmBinPath: string): Promise<WasmModule> {\n        let wasmModule: ModuleControllerType<ExportType> | null = null;\n\n        const getWasm = (): ModuleControllerType<ExportType> => {\n            if (wasmModule === null) {\n                throw Error('Wasm is no initialized');\n            }\n\n            return wasmModule;\n        };\n\n        const apiBrowser = new ApiBrowser(getWasm);\n\n        //@ts-expect-error\n        window.$vertigoApi = apiBrowser;\n\n        wasmModule = await wasmInit<ImportType, ExportType>(wasmBinPath, {\n            mod: {\n                panic_message: (ptr: number, size: number) => {\n                    const decoder = new TextDecoder(\"utf-8\");\n                    const m = getWasm().getUint8Memory().subarray(ptr, ptr + size);\n                    const message = decoder.decode(m);\n                    console.error('PANIC', message);\n                },\n                dom_access: (ptr: number, size: number): number => {\n                    let args = getWasm().decodeArguments(ptr, size);\n                    if (Array.isArray(args)) {\n                        const path = args;\n                        let wsk = new JsNode(apiBrowser, apiBrowser.dom.nodes, null);\n\n                        for (const pathItem of path) {\n                            const newWsk = wsk.next(path, pathItem);\n\n                            if (newWsk === null) {\n                                return 0;\n                            }\n\n                            wsk = newWsk;\n                        }\n\n                        return getWasm().valueSaveToBuffer(wsk.toValue());\n                    }\n\n                    console.error('dom_access - wrong parameters', args);\n                    return 0;\n                },\n            }\n        });\n\n        return new WasmModule(wasmModule);\n    }\n}\n","import { WasmModule } from \"./wasm_module\";\n\n// vertigo-cli compatibility version, change together with package version.\nconst VERTIGO_COMPAT_VERSION_MAJOR = 0;\nconst VERTIGO_COMPAT_VERSION_MINOR = 8;\n\nconst moduleRun: Set<string> = new Set();\n\nconst runModule = async (wasm: string) => {\n    if (moduleRun.has(wasm)) {\n        //ok, module is run\n        return;\n    }\n\n    if (moduleRun.size > 0) {\n        console.error('Only one wasm module can be run', { moduleRun, wasm });\n        return;\n    }\n\n    moduleRun.add(wasm);\n\n    console.info(`Wasm module: \"${wasm}\" -> start`);\n    const wasmModule = await WasmModule.create(wasm);\n    console.info(`Wasm module: \"${wasm}\" -> initialized`);\n    wasmModule.vertigo_entry_function(VERTIGO_COMPAT_VERSION_MAJOR, VERTIGO_COMPAT_VERSION_MINOR);\n    console.info(`Wasm module: \"${wasm}\" -> launched vertigo_entry_function with version ${VERTIGO_COMPAT_VERSION_MAJOR}.${VERTIGO_COMPAT_VERSION_MINOR}`);\n};\n\nconst findAndRunModule = async () => {\n    document.querySelectorAll('*[data-vertigo-run-wasm]').forEach((node) => {\n        const wasm = node.getAttribute('data-vertigo-run-wasm');\n\n        if (typeof wasm === 'string') {\n            runModule(wasm);\n        } else {\n            console.error('Run error', node);\n        }\n    });\n};\n\n(() => {\n    window.addEventListener('load', findAndRunModule);\n    setTimeout(findAndRunModule, 3000);\n})();\n"],"names":["assertNever","_value","Error","decoder","TextDecoder","encoder","TextEncoder","BufferCursor","constructor","getUint8Memory","ptr","size","this","pointer","dataView","DataView","buffer","getByte","value","getUint8","setByte","byte","setUint8","getU16","getUint16","setU16","setUint16","getU32","getUint32","setU32","setUint32","getI32","getInt32","setI32","setInt32","getU64","getBigUint64","setU64","setBigUint64","getI64","getBigInt64","setI64","setBigInt64","getF64","getFloat64","setF64","setFloat64","getBuffer","result","subarray","setBuffer","length","set","getString","decode","setString","encode","getSavedSize","getStringSize","JsValueConst","GuardJsValue","isString","isStringOrNull","isNumber","type","isBigInt","isJsObject","JsJsonConst","jsJsonGetSize","Array","isArray","sum","item","key","propertyValue","Object","entries","jsJsonDecodeItem","cursor","typeParam","out","listSize","i","push","saveJsJsonToBufferItem","list","jsValueDecodeItem","json","console","error","getSize","Uint8Array","saveToBufferItem","undefined","convertFromJsValue","newList","convertToJsValue","BigInt","convertToJsJson","_error","propName","propValue","map","warn","wasmInit","async","wasmBinPath","imports","module_instance","WebAssembly","instantiateStreaming","stream","fetch","err","info","resp","binary","arrayBuffer","instantiate","fetchModule","cacheGetUint8Memory","instance","exports","memory","Memory","decodeArguments","jsValueDecode","valueSaveToBuffer","alloc","savedSize","saveToBuffer","wasm_callback","callback_id","value_ptr","result_ptr_and_size","response","Number","free","Cookies","get","cname","cookie","document","split","cookieChunk","trim","cookieName","cookieValue","decodeURIComponent","get_json","cvalue_str","JSON","parse","e","cvalue","expires_in","cvalueEncoded","encodeURIComponent","d","Date","setTime","getTime","expires","toUTCString","set_json","stringify","Interval","getWasm","interval_set","duration","setInterval","interval_clear","timer_id","clearInterval","timeout_set","setTimeout","timeout_clear","clearTimeout","HashRouter","trigger","callback","from","values","add","remove","delete","new_hash","location","hash","Map","window","addEventListener","substr","catchError","wasm","callbackSuccess","responseMessage","String","toString","status","Fetch","fetch_send_request","method","url","headers","body","fetch_send_request_inner","fetchHeaders","fetchBody","headersRecord","Headers","has","getHeadersAndBody","responseType","contentType","typeClear","toLowerCase","getTypeResponse","text","textUint8Array","EventEmitter","events","Set","on","isActive","onExec","param","eventsCopy","itemCallbackToRun","PromiseBoxRace","promiseResolveReject","resolve","reject","isFulfilled","promise","Promise","localResolve","localReject","createPromiseValue","reconnectDelay","label","timeout_retry","timeout","LogContext","host","formatLog","message","SocketConnection","close","send","eventMessage","connect","log","done","socket","WebSocket","isClose","closeSocket","socketConnection","event","dataRaw","data","startSocket","timeout_connection","onMessage","isConnect","openSocketResult","catch","dispose","DriverWebsocket","websocket_register_callback","controller","controllerList","assertNeverMessage","websocket_unregister_callback","websocket_send_message","MapNodes","initNodes","get_root_head","childNodes","get_root_body","style","createElement","appendChild","get_root_html","documentElement","head","id","get_any_option","get_any","get_node_element","node","HTMLElement","get_node","Element","get_text","Text","get_comment","Comment","insert_css","selector","content","createTextNode","removeInitNodes","insert_before","parent","child","ref_id","parentNode","childNode","insertBefore","ref_node","DriverDom","historyLocation","dom_bulk_update","commands","setFocus","command","bulk_update_command","name","toLocaleLowerCase","nodes","focus","callbacks","ev","preventDefault","debugNodes","ids","create_node","createElementNS","href","getAttribute","startsWith","scrollTo","set_attribute","setAttribute","HTMLInputElement","HTMLTextAreaElement","defaultValue","remove_attribute","removeAttribute","remove_node","create_text","remove_text","update_text","textContent","callback_click","click_event","stopPropagation","callback_submit","callback_input","target","callback_change","HTMLSelectElement","callback_blur","_event","callback_mousedown","callback_mouseup","callback_mouseenter","callback_mouseleave","callback_drop","DragEvent","dataTransfer","files","items","file","getAsFile","then","all","params","callback_keydown","KeyboardEvent","code","altKey","ctrlKey","shiftKey","metaKey","callback_load","callback_add","event_name","callback_remove","removeEventListener","comment","createComment","assertNeverCommand","HistoryLocation","history","pushState","replace","replaceState","pathname","search","ApiBrowser","getRandom","min","max","range","Math","floor","random","isBrowser","get_env","getTimezoneOffset","interval","hashRouter","websocket","dom","JsNode","api","wsk","getByProperty","path","property","nextCurrentPointer","toValue","next","commandName","args","nextApi","nextRoot","nextGet","nextSet","nextCall","nextGetProps","firstName","rest","domId","getArgs","setArgs","callArgs","paramsJs","WasmModule","vertigo_entry_function","major","minor","create","wasmModule","apiBrowser","$vertigoApi","mod","panic_message","m","dom_access","pathItem","newWsk","moduleRun","findAndRunModule","querySelectorAll","forEach","runModule"],"mappings":"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"}