{"version":3,"file":"wasm_run.js","sources":["src_js/assert_never.ts","src_js/buffer_cursor.ts","src_js/guard.ts","src_js/jsjson.ts","src_js/jsvalue.ts","src_js/wasm_init.ts","src_js/api_browser/cookies.ts","src_js/api_browser/interval.ts","src_js/api_browser/hashrouter.ts","src_js/api_browser/fetch.ts","src_js/api_browser/websocket/event_emiter.ts","src_js/api_browser/websocket/promise.ts","src_js/api_browser/websocket/connection.ts","src_js/api_browser/websocket/websocket.ts","src_js/api_browser/dom/map_nodes.ts","src_js/api_browser/dom/dom.ts","src_js/api_browser/historyLocation.ts","src_js/api_browser.ts","src_js/js_node.ts","src_js/wasm_module.ts","src_js/index.ts"],"sourcesContent":["\nexport const assertNever = (_value: never) => {\n    throw Error(\"assert never\");\n}\n","///https://javascript.info/arraybuffer-binary-arrays#dataview\n\nconst decoder = new TextDecoder(\"utf-8\");\nconst encoder = new TextEncoder();\n\nexport class BufferCursor {\n    private dataView: DataView;\n    private pointer: number = 0;\n\n    constructor(\n        private getUint8Memory: () => Uint8Array,\n        private ptr: number,\n        private size: number,\n    ) {\n        this.dataView = new DataView(\n            this.getUint8Memory().buffer,\n            this.ptr,\n            this.size\n        );\n    }\n\n    public getByte(): number {\n        const value = this.dataView.getUint8(this.pointer);\n        this.pointer += 1;\n        return value;\n    }\n\n    public setByte(byte: number) {\n        this.dataView.setUint8(this.pointer, byte);\n        this.pointer += 1;\n    }\n\n    public getU16(): number {\n        const value = this.dataView.getUint16(this.pointer);\n        this.pointer += 2;\n        return value;\n    }\n\n    public setU16(value: number) {\n        this.dataView.setUint16(this.pointer, value);\n        this.pointer += 2;\n    }\n\n    public getU32(): number {\n        const value = this.dataView.getUint32(this.pointer);\n        this.pointer += 4;\n        return value;\n    }\n\n    public setU32(value: number) {\n        this.dataView.setUint32(this.pointer, value);\n        this.pointer += 4;\n    }\n\n    public getI32(): number {\n        const value = this.dataView.getInt32(this.pointer);\n        this.pointer += 4;\n        return value;\n    }\n\n    public setI32(value: number) {\n        this.dataView.setInt32(this.pointer, value);\n        this.pointer += 4;\n    }\n\n    public getU64(): bigint {\n        const value = this.dataView.getBigUint64(this.pointer);\n        this.pointer += 8;\n        return value;\n    }\n\n    public setU64(value: bigint) {\n        this.dataView.setBigUint64(this.pointer, value);\n        this.pointer += 8;\n    }\n\n    public getI64(): bigint {\n        const value = this.dataView.getBigInt64(this.pointer);\n        this.pointer += 8;\n        return value;\n    }\n\n    public setI64(value: bigint) {\n        this.dataView.setBigInt64(this.pointer, value);\n        this.pointer += 8;\n    }\n\n    public getF64(): number {\n        const value = this.dataView.getFloat64(this.pointer);\n        this.pointer += 8;\n        return value;\n    }\n\n    public setF64(value: number) {\n        this.dataView.setFloat64(this.pointer, value);\n        this.pointer += 8;\n    }\n\n    public getBuffer(): Uint8Array {\n        const size = this.getU32();\n        const result = this\n            .getUint8Memory()\n            .subarray(\n                this.ptr + this.pointer,\n                this.ptr + this.pointer + size\n            );\n\n        this.pointer += size;\n        return result;\n    }\n\n    public setBuffer(buffer: Uint8Array) {\n        const size = buffer.length;\n        this.setU32(size);\n\n        const sub_buffer = this\n            .getUint8Memory()\n            .subarray(\n                this.ptr + this.pointer,\n                this.ptr + this.pointer + size\n            );\n\n        sub_buffer.set(buffer);\n\n        this.pointer += size;\n    }\n\n    public getString(): string {\n        return decoder.decode(this.getBuffer());\n    }\n\n    public setString(value: string) {\n        const buffer = encoder.encode(value);\n        this.setBuffer(buffer);\n    }\n\n    public getSavedSize(): number {\n        return this.pointer;\n    }\n}\n\nexport const getStringSize = (value: string): number => {\n    return new TextEncoder().encode(value).length;\n};\n\n","import { JsValueType, JsValueConst } from \"./jsvalue\";\n\nexport namespace GuardJsValue {\n    export const isString = (value: JsValueType): value is string => {\n        return typeof value === 'string';\n    }\n\n    export const isStringOrNull = (value: JsValueType): value is string | null => {\n        return value === null || typeof value === 'string';\n    }\n\n    export const isNumber = (value: JsValueType): value is { type: typeof JsValueConst.U32, value: number } | { type: typeof JsValueConst.I32, value: number } => {\n        if (typeof value === 'object' && value !== null && 'type' in value) {\n            return value.type === JsValueConst.I32 || value.type === JsValueConst.U32\n        }\n\n        return false;\n    }\n\n    export const isBigInt = (value: JsValueType): value is { type: typeof JsValueConst.U64, value: bigint } | { type: typeof JsValueConst.I64, value: bigint } => {\n        if (typeof value === 'object' && value !== null && 'type' in value) {\n            return value.type === JsValueConst.I64 || value.type === JsValueConst.U64\n        }\n\n        return false;\n    }\n}\n","import { BufferCursor, getStringSize } from \"./buffer_cursor\";\n\nconst JsJsonConst = {\n    True: 1,\n    False: 2,\n    Null: 3,\n\n    String: 4,\n    Number: 5,\n    List: 6,\n    Object: 7,\n} as const;\n\nexport type JsJsonType\n    = boolean\n    | null\n    | number\n    | string\n    | Array<JsJsonType>\n    | JsJsonMapType;\n\ninterface JsJsonMapType {\n    [key: string]: JsJsonType\n}\n\nexport const jsJsonGetSize = (value: JsJsonType): number => {\n\n    if (typeof value === 'boolean') {\n        return 1;\n    }\n\n    if (value === null) {\n        return 1;\n    }\n\n    if (typeof value === 'string') {\n        return 1 + 4 + getStringSize(value);\n    }\n\n    if (Array.isArray(value)) {\n        let sum = 1 + 4;\n\n        for (const item of value) {\n            sum += jsJsonGetSize(item);\n        }\n\n        return sum;\n    }\n\n    if (typeof value === 'number') {\n        return 9;   //1 + 8\n    }\n\n    //object\n    let sum = 1 + 2;\n\n    for (const [key, propertyValue] of Object.entries(value)) {\n        sum += 4 + getStringSize(key);\n        sum += jsJsonGetSize(propertyValue);\n    }\n\n    return sum;\n};\n\nexport const jsJsonDecodeItem = (cursor: BufferCursor): JsJsonType => {\n    const typeParam = cursor.getByte();\n\n    if (typeParam === JsJsonConst.True) {\n        return true;\n    }\n\n    if (typeParam === JsJsonConst.False) {\n        return false;\n    }\n\n    if (typeParam === JsJsonConst.Null) {\n        return null;\n    }\n\n    if (typeParam === JsJsonConst.String) {\n        return cursor.getString();\n    }\n\n    if (typeParam === JsJsonConst.Number) {\n        return cursor.getF64();\n    }\n\n    if (typeParam === JsJsonConst.List) {\n        const out: Array<JsJsonType> = [];\n\n        const listSize = cursor.getU32();\n\n        for (let i=0; i<listSize; i++) {\n            out.push(jsJsonDecodeItem(cursor))\n        }\n\n        return out;\n    }\n\n    //object\n    const out: Record<string, JsJsonType> = {};\n\n    const listSize = cursor.getU16();\n\n    for (let i=0; i<listSize; i++) {\n        const key = cursor.getString();\n        const value = jsJsonDecodeItem(cursor);\n        out[key] = value;\n    }\n\n    return out;\n}\n\nexport const saveJsJsonToBufferItem = (value: JsJsonType, cursor: BufferCursor) => {\n    if (value === true) {\n        cursor.setByte(JsJsonConst.True);\n        return;\n    }\n\n    if (value === false) {\n        cursor.setByte(JsJsonConst.False);\n        return;\n    }\n\n    if (value === null) {\n        cursor.setByte(JsJsonConst.Null);\n        return;\n    }\n\n    if (typeof value === 'string') {\n        cursor.setByte(JsJsonConst.String);\n        cursor.setString(value);\n        return;\n    }\n\n    if (typeof value === 'number') {\n        cursor.setByte(JsJsonConst.Number);\n        cursor.setF64(value);\n        return;\n    }\n\n    if (Array.isArray(value)) {\n        cursor.setByte(JsJsonConst.List);\n        cursor.setU32(value.length);\n\n        for (const item of value) {\n            saveJsJsonToBufferItem(item, cursor);\n        }\n\n        return;\n    }\n\n    //object\n    const list: Array<[string, JsJsonType]> = [];\n\n    for (const [key, propertyValue] of Object.entries(value)) {\n        list.push([key, propertyValue]);\n    }\n\n    cursor.setByte(JsJsonConst.Object);\n    cursor.setU16(list.length);\n\n    for (const [key, propertyValue] of list) {\n        cursor.setString(key);\n        saveJsJsonToBufferItem(propertyValue, cursor);\n    }\n};\n","import { assertNever } from \"./assert_never\";\nimport { BufferCursor, getStringSize } from \"./buffer_cursor\";\nimport { GuardJsValue } from \"./guard\";\nimport { jsJsonDecodeItem, jsJsonGetSize, JsJsonType, saveJsJsonToBufferItem } from \"./jsjson\";\n\nexport const JsValueConst = {\n    U32: 1,\n    I32: 2,\n    U64: 3,\n    I64: 4,\n    F64: 5,\n\n    True: 6,\n    False: 7,\n    Null: 8,\n    Undefined: 9,\n\n    Vec: 10,\n    String: 11,\n    List: 12,\n    Object: 13,\n    Json: 14,\n} as const;\n\nexport type JsValueType\n    = { type: typeof JsValueConst.U32, value: number, }\n    | { type: typeof JsValueConst.I32, value: number, }\n    | { type: typeof JsValueConst.U64, value: bigint, }\n    | { type: typeof JsValueConst.I64, value: bigint, }\n    | { type: typeof JsValueConst.F64, value: number, }\n    | boolean\n    | null\n    | undefined\n    | string\n    | Array<JsValueType>\n    | Uint8Array\n    | { type: typeof JsValueConst.Object, value: JsValueMapType }\n    | { type: typeof JsValueConst.Json, value: JsJsonType };\n\ninterface JsValueMapType {\n    [key: string]: JsValueType\n}\n\n//https://github.com/unsplash/unsplash-js/pull/174\n// export type AnyJson = boolean | number | string | null | JsonArray | JsonMap;\n// export interface JsonMap { [key: string]: AnyJson }\n// export interface JsonArray extends Array<AnyJson> {}\n\n\nconst jsValueDecodeItem = (cursor: BufferCursor): JsValueType => {\n    const typeParam = cursor.getByte();\n\n    if (typeParam === JsValueConst.U32) {\n        return {\n            type: JsValueConst.U32,\n            value: cursor.getU32()\n        };\n    }\n\n    if (typeParam === JsValueConst.I32) {\n        return {\n            type: JsValueConst.I32,\n            value: cursor.getI32()\n        };\n    }\n\n    if (typeParam === JsValueConst.U64) {\n        return {\n            type: JsValueConst.U64,\n            value: cursor.getU64()\n        };\n    }\n\n    if (typeParam === JsValueConst.I64) {\n        return {\n            type: JsValueConst.I64,\n            value: cursor.getI64()\n        };\n    }\n\n    if (typeParam === JsValueConst.F64) {\n        return {\n            type: JsValueConst.F64,\n            value: cursor.getF64()\n        };\n    }\n\n    if (typeParam === JsValueConst.True) {\n        return true;\n    }\n\n    if (typeParam === JsValueConst.False) {\n        return false;\n    }\n\n    if (typeParam === JsValueConst.Null) {\n        return null;\n    }\n\n    if (typeParam === JsValueConst.Undefined) {\n        return undefined;\n    }\n\n    if (typeParam === JsValueConst.Vec) {\n        return cursor.getBuffer();\n    }\n\n    if (typeParam === JsValueConst.String) {\n        return cursor.getString();\n    }\n\n    if (typeParam === JsValueConst.List) {\n        const out: Array<JsValueType> = [];\n\n        const listSize = cursor.getU32();\n\n        for (let i=0; i<listSize; i++) {\n            out.push(jsValueDecodeItem(cursor))\n        }\n\n        return out;\n    }\n\n    if (typeParam === JsValueConst.Object) {\n        const out: Record<string, JsValueType> = {};\n\n        const listSize = cursor.getU16();\n\n        for (let i=0; i<listSize; i++) {\n            const key = cursor.getString();\n            const value = jsValueDecodeItem(cursor);\n            out[key] = value;\n        }\n\n        return {\n            type: JsValueConst.Object,\n            value: out\n        };\n    }\n\n    if (typeParam === JsValueConst.Json) {\n        const json = jsJsonDecodeItem(cursor);\n\n        return {\n            type: JsValueConst.Json,\n            value: json\n        };\n    }\n\n    console.error('typeParam', typeParam);\n    throw Error('Invalid branch');\n};\n\nexport const jsValueDecode = (getUint8Memory: () => Uint8Array, ptr: number, size: number): JsValueType => {\n    try {\n        const cursor = new BufferCursor(getUint8Memory, ptr, size);\n        return jsValueDecodeItem(cursor);\n    } catch (err) {\n        console.error(err);\n        return [];\n    }\n};\n\nconst getSize = (value: JsValueType): number => {\n    if (\n        value === true ||\n        value === false ||\n        value === null ||\n        value === undefined\n    ) {\n        return 1;\n    }\n\n    if (GuardJsValue.isString(value)) {\n        return 1 + 4 + getStringSize(value);\n    }\n\n    if (Array.isArray(value)) {\n        let sum = 1 + 4;\n\n        for (const item of value) {\n            sum += getSize(item);\n        }\n\n        return sum;\n    }\n\n    if (value instanceof Uint8Array) {\n        return 1 + 4 + value.length;\n    }\n\n    if (value.type === JsValueConst.I32 || value.type === JsValueConst.U32) {\n        return 5;   // 1 + 4\n    }\n\n    if (value.type === JsValueConst.I64 || value.type === JsValueConst.U64 || value.type == JsValueConst.F64) {\n        return 9;   // 1 + 8\n    }\n\n    if (value.type === JsValueConst.Object) {\n        let sum = 1 + 2;\n\n        for (const [key, propertyValue] of Object.entries(value.value)) {\n            sum += 4 + getStringSize(key);\n            sum += getSize(propertyValue);\n        }\n\n        return sum;\n    }\n\n    if (value.type === JsValueConst.Json) {\n        return 1 + jsJsonGetSize(value.value);\n    }\n\n    return assertNever(value);\n};\n\nconst saveToBufferItem = (value: JsValueType, cursor: BufferCursor) => {\n    if (value === true) {\n        cursor.setByte(JsValueConst.True);\n        return;\n    }\n\n    if (value === false) {\n        cursor.setByte(JsValueConst.False);\n        return;\n    }\n\n    if (value === null) {\n        cursor.setByte(JsValueConst.Null);\n        return;\n    }\n\n    if (value === undefined) {\n        cursor.setByte(JsValueConst.Undefined);\n        return;\n    }\n\n    if (value instanceof Uint8Array) {\n        cursor.setByte(JsValueConst.Vec);\n        cursor.setBuffer(value);\n        return;\n    }\n\n    if (GuardJsValue.isString(value)) {\n        cursor.setByte(JsValueConst.String);\n        cursor.setString(value);\n        return;\n    }\n\n    if (Array.isArray(value)) {\n        cursor.setByte(JsValueConst.List);\n        cursor.setU32(value.length);\n\n        for (const item of value) {\n            saveToBufferItem(item, cursor);\n        }\n\n        return;\n    }\n\n    if (value.type === JsValueConst.U32) {\n        cursor.setByte(JsValueConst.U32);\n        cursor.setU32(value.value);\n        return;\n    }\n\n    if (value.type === JsValueConst.I32) {\n        cursor.setByte(JsValueConst.I32);\n        cursor.setI32(value.value);\n        return;\n    }\n\n    if (value.type === JsValueConst.U64) {\n        cursor.setByte(JsValueConst.U64);\n        cursor.setU64(value.value);\n        return;\n    }\n\n    if (value.type === JsValueConst.I64) {\n        cursor.setByte(JsValueConst.I64);\n        cursor.setI64(value.value);\n        return;\n    }\n\n    if (value.type === JsValueConst.F64) {\n        cursor.setByte(JsValueConst.F64);\n        cursor.setF64(value.value);\n        return;\n    }\n\n    if (value.type === JsValueConst.Object) {\n        const list: Array<[string, JsValueType]> = [];\n\n        for (const [key, propertyValue] of Object.entries(value.value)) {\n            list.push([key, propertyValue]);\n        }\n\n        cursor.setByte(JsValueConst.Object);\n        cursor.setU16(list.length);\n\n        for (const [key, propertyValue] of list) {\n            cursor.setString(key);\n            saveToBufferItem(propertyValue, cursor);\n        }\n        return;\n    }\n\n    if (value.type === JsValueConst.Json) {\n        cursor.setByte(JsValueConst.Json);\n        saveJsJsonToBufferItem(value.value, cursor);\n        return;\n    }\n\n    return assertNever(value);\n};\n\nexport const saveToBuffer = (\n    getUint8Memory: () => Uint8Array,\n    alloc: (size: number) => number,\n    value: JsValueType,\n): number => {\n    if (value === undefined) {\n        return 0;\n    }\n\n    const size = getSize(value);\n    const ptr = alloc(size);\n\n    const cursor = new BufferCursor(getUint8Memory, ptr, size);\n    saveToBufferItem(value, cursor);\n\n    if (size !== cursor.getSavedSize()) {\n        console.error({\n            size,\n            savedSize: cursor.getSavedSize(),\n        });\n\n        throw Error('Mismatch between calculated and recorded size');\n    }\n\n    return ptr;\n};\n\nexport const convertFromJsValue = (value: JsValueType): unknown => {\n    if (value === true) {\n        return true;\n    }\n\n    if (value === false) {\n        return false;\n    }\n\n    if (value === null) {\n        return null;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    if (value instanceof Uint8Array) {\n        return value;\n    }\n\n    if (GuardJsValue.isString(value)) {\n        return value;\n    }\n\n    if (Array.isArray(value)) {\n        const newList = [];\n\n        for (const item of value) {\n            newList.push(convertFromJsValue(item));\n        }\n\n        return newList;\n    }\n\n    if (value.type === JsValueConst.U32 || value.type === JsValueConst.I32) {\n        return value.value;\n    }\n\n    if (value.type === JsValueConst.U64 || value.type === JsValueConst.I64 || value.type === JsValueConst.F64) {\n        return value.value;\n    }\n\n    if (value.type === JsValueConst.Object) {\n        const result: Record<string, unknown> = {};\n\n        for (const [key, propertyValue] of Object.entries(value.value)) {\n            result[key] = convertFromJsValue(propertyValue);\n        }\n\n        return result;\n    }\n\n    if (value.type === JsValueConst.Json) {\n        return value.value;\n    }\n\n    return assertNever(value);\n};\n\n//throws an exception when it fails to convert to JsValue\nexport const convertToJsValue = (value: unknown): JsValueType => {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    if (value === true || value === false || value === undefined || value === null) {\n        return value;\n    }\n\n    if (typeof value === 'number') {\n        if (value === (value | 0)) {\n            // is integer\n            if (-(2 ** 31) <= value && value < 2 ** 31) {\n                return {\n                    type: JsValueConst.I32,\n                    value\n                };\n            }\n\n            return {\n                type: JsValueConst.I64,\n                value: BigInt(value)\n            };\n        } else {\n            // is float\n            return {\n                type: JsValueConst.F64,\n                value: value,\n            }\n        }\n    }\n\n    if (typeof value === 'bigint') {\n        return {\n            type: JsValueConst.I64,\n            value\n        };\n    }\n\n    if (value instanceof Uint8Array) {\n        return value;\n    }\n\n    if (typeof value === 'object') {\n        try {\n            const json = convertToJsJson(value);\n            return {\n                type: JsValueConst.Json,\n                value: json\n            };\n        } catch (_error) {\n        }\n\n        const result: Record<string, JsValueType> = {};\n\n        for (const [propName, propValue] of Object.entries(value)) {\n            result[propName] = convertToJsValue(propValue);\n        }\n\n        return {\n            type: JsValueConst.Object,\n            value: result\n        };\n    }\n\n    if (Array.isArray(value)) {\n        try {\n            const list = value.map(convertToJsJson);\n            return {\n                type: JsValueConst.Json,\n                value: list\n            };\n        } catch (_error) {\n            return value.map(convertToJsValue);\n        }\n    }\n\n    console.warn('convertToJsValue', value);\n    throw Error('It is not possible to convert this data to JsValue');\n};\n\n//throws an exception when it fails to convert to JsJson\nexport const convertToJsJson = (value: unknown): JsJsonType => {\n    if (typeof value === 'boolean' || value === null || typeof value === 'number' || typeof value === 'string') {\n        return value;\n    }\n\n    if (Array.isArray(value)) {\n        return value.map(convertToJsJson);\n    }\n\n    if (typeof value === 'object') {\n        const result: Record<string, JsJsonType> = {};\n\n        for (const [propName, propValue] of Object.entries(value)) {\n            result[propName] = convertToJsJson(propValue);\n        }\n\n        return result;\n    }\n\n    console.warn('convertToJsJson', value);\n    throw Error('It is not possible to convert this data to JsJson');\n};\n","import { jsValueDecode, JsValueType, saveToBuffer } from './jsvalue';\n\nexport interface BaseExportType {\n    alloc: (size: number) => number,\n    free: (pointer: number) => void,\n    wasm_callback: (callback_id: bigint, value_ptr: number) => bigint,   //result => pointer: 32bit, size: 32bit\n};\n\nexport interface ModuleControllerType<ExportType extends BaseExportType> {\n    exports: ExportType,\n    decodeArguments: (ptr: number, size: number) => JsValueType,\n    getUint8Memory: () => Uint8Array,\n    wasm_callback: (callback_id: bigint, params: JsValueType) => JsValueType,\n    valueSaveToBuffer: (value: JsValueType) => number,\n}\n\nconst fetchModule = async (wasmBinPath: string, imports: Record<string, WebAssembly.ModuleImports>): Promise<WebAssembly.WebAssemblyInstantiatedSource> => {\n    if (typeof WebAssembly.instantiateStreaming === 'function') {\n        const stream = fetch(wasmBinPath);\n        try {\n            const module = await WebAssembly.instantiateStreaming(stream, imports);\n            return module;\n        } catch (err) {\n            console.warn(\"`WebAssembly.instantiateStreaming` failed. This could happen if your server does not serve wasm with `application/wasm` MIME type, but check the original error too. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", err);\n        }\n    }\n\n    console.info('fetchModule by WebAssembly.instantiate');\n\n    const resp = await fetch(wasmBinPath);\n    const binary = await resp.arrayBuffer();\n    const module_instance = await WebAssembly.instantiate(binary, imports);\n    return module_instance;\n};\n\nexport const wasmInit = async <ImportType extends Record<string, Function>, ExportType extends BaseExportType>(\n    wasmBinPath: string,\n    imports: { mod: ImportType },\n): Promise<ModuleControllerType<ExportType>> => {\n    const module_instance = await fetchModule(wasmBinPath, imports);\n\n    let cacheGetUint8Memory: Uint8Array = new Uint8Array(1);\n\n    const getUint8Memory = () => {\n        if (module_instance.instance.exports.memory instanceof WebAssembly.Memory) {\n            if (cacheGetUint8Memory.buffer !== module_instance.instance.exports.memory.buffer) {\n                cacheGetUint8Memory = new Uint8Array(module_instance.instance.exports.memory.buffer);\n            }\n            return cacheGetUint8Memory;\n        } else {\n            throw Error('Missing memory');\n        }\n    };\n\n    //@ts-expect-error\n    const exports: ExportType = module_instance.instance.exports;\n\n    const decodeArguments = (ptr: number, size: number) => jsValueDecode(getUint8Memory, ptr, size);\n\n    const valueSaveToBuffer = (value: JsValueType): number => saveToBuffer(getUint8Memory, exports.alloc, value);\n\n    const wasm_callback = (callback_id: bigint, value: JsValueType): JsValueType => {\n        const value_ptr = valueSaveToBuffer(value);\n        let result_ptr_and_size = exports.wasm_callback(callback_id, value_ptr);\n\n        if (result_ptr_and_size === 0n) {\n            return undefined;\n        }\n\n        const size = result_ptr_and_size % (2n ** 32n);\n        const ptr = result_ptr_and_size >> 32n;\n\n        if (ptr >= 2n ** 32n) {\n            console.error(`Overflow of a variable with a pointer result_ptr_and_size=${result_ptr_and_size}`);\n        }\n\n        const response = decodeArguments(Number(ptr), Number(size));\n        exports.free(Number(ptr));\n\n        return response;\n    };\n\n    return {\n        exports,\n        decodeArguments,\n        getUint8Memory,\n        wasm_callback,\n        valueSaveToBuffer,\n    };\n};\n","import { JsJsonType } from \"../jsjson\";\n\nexport class Cookies {\n    public get = (cname: string): string => {\n        for (const cookie of document.cookie.split(';')) {\n            if (cookie === \"\") continue;\n\n            const cookieChunk = cookie.trim().split('=');\n\n            if (cookieChunk.length !== 2) {\n                console.warn(`Cookies.get: Incorrect number of cookieChunk => ${cookieChunk.length} in ${cookie}`);\n                continue;\n            }\n\n            const cookieName = cookieChunk[0];\n            const cookieValue = cookieChunk[1];\n\n            if (cookieName === undefined || cookieValue === undefined) {\n                console.warn(`Cookies.get: Broken cookie part => ${cookie}`);\n                continue;\n            }\n\n            if (cookieName === cname) {\n                return decodeURIComponent(cookieValue);\n            }\n        }\n\n        return '';\n    }\n\n    public get_json = (cname: string): JsJsonType => {\n        let cvalue_str = this.get(cname);\n\n        try {\n            let cookie_value = JSON.parse(cvalue_str);\n            return cookie_value;\n        } catch(e) {\n            console.error!(\"Error deserializing cookie\", e);\n            return null;\n        }\n    }\n\n    public set = (\n        cname: string,\n        cvalue: string,\n        expires_in: bigint,\n    ) => {\n        const cvalueEncoded = cvalue == null ? \"\" : encodeURIComponent(cvalue);\n\n        const d = new Date();\n        d.setTime(d.getTime() + (Number(expires_in) * 1000));\n        let expires = \"expires=\"+ d.toUTCString();\n\n        document.cookie = `${cname}=${cvalueEncoded};${expires};path=/;samesite=strict\"`;\n    }\n\n    public set_json = (\n        cname: string,\n        cvalue: JsJsonType,\n        expires_in: bigint,\n    ) => {\n        let cvalue_str = JSON.stringify(cvalue);\n\n        this.set(cname, cvalue_str, expires_in);\n    }\n}\n","import { ModuleControllerType } from \"../wasm_init\";\nimport { ExportType } from \"../wasm_module\";\n\nexport class Interval {\n    private readonly getWasm: () => ModuleControllerType<ExportType>;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.getWasm = getWasm;\n    }\n\n    public interval_set = (duration: number, callback_id: bigint): ReturnType<typeof setTimeout> => {\n        const timer_id = setInterval(() => {\n            this.getWasm().wasm_callback(callback_id, undefined);\n        }, duration);\n\n        return timer_id;\n    }\n\n    public interval_clear = (timer_id: number) => {\n        clearInterval(timer_id);\n    }\n\n    timeout_set = (duration: number, callback_id: bigint): ReturnType<typeof setTimeout> => {\n        const timeout_id = setTimeout(() => {\n            this.getWasm().wasm_callback(callback_id, undefined);\n        }, duration);\n\n        return timeout_id;\n    }\n\n    timeout_clear = (timer_id: number): void => {\n        clearTimeout(timer_id);\n    }\n}\n","import { ModuleControllerType } from \"../wasm_init\";\nimport { ExportType } from \"../wasm_module\";\n\nexport class HashRouter {\n    private getWasm: () => ModuleControllerType<ExportType>;\n    private callback: Map<bigint, () => void>;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.getWasm = getWasm;\n        this.callback = new Map();\n\n        window.addEventListener(\"hashchange\", this.trigger);\n    }\n\n    private trigger = () => {\n        for (const callback of Array.from(this.callback.values())) {\n            callback();\n        }\n    }\n\n    public add = (callback_id: bigint) => {\n        this.callback.set(callback_id, () => {\n            this.getWasm().wasm_callback(callback_id, this.get());\n        });\n    }\n\n    public remove = (callback_id: bigint) => {\n        this.callback.delete(callback_id);\n    }\n\n    public push = (new_hash: string) => {\n        if (this.get() === new_hash) {\n            return;\n        }\n\n        location.hash = new_hash;\n        this.trigger();\n    }\n\n    public get(): string {\n        return decodeURIComponent(location.hash.substr(1));\n    }\n}\n","import { JsJsonType } from \"../jsjson\";\nimport { JsValueConst } from \"../jsvalue\";\nimport { ModuleControllerType } from \"../wasm_init\";\nimport { ExportType } from \"../wasm_module\";\n\nconst getTypeResponse = (contentType: string | null): 'json' | 'text' | 'bin' => {\n    if (contentType === null) {\n        console.error('Missing header content-type');\n        return 'bin';\n    }\n\n    const [type] = contentType.split(\";\");\n\n    if (type === undefined) {\n        console.error('Missing value for content-type');\n        return 'bin';\n    }\n\n    const typeClear = type.toLowerCase().trim();\n\n    if (typeClear === 'application/json') {\n        return 'json';\n    }\n\n    if (typeClear === 'text/plain') {\n        return 'text';\n    }\n\n    console.error(`No match found for content-type=${contentType}`);\n    return 'bin';\n}\n\nconst catchError = async (\n    wasm: ModuleControllerType<ExportType>,\n    callback_id: bigint,\n    response: Response,\n    callbackSuccess: (response: Response) => Promise<void>\n) => {\n    try {\n        await callbackSuccess(response);\n    } catch (error) {\n        console.error('fetch error (2) - json', error);\n        const responseMessage = new String(error).toString();\n\n        wasm.wasm_callback(callback_id, [\n            false,                                      //ok\n            { type: JsValueConst.U32, value: response.status },    //http code\n            responseMessage                             //body (string)\n        ]);\n    }\n};\n\nconst getHeadersAndBody = (headersRecord: Record<string, string>, body: undefined | string | Uint8Array | JsJsonType | undefined): [Headers, string | ArrayBuffer | undefined] => {\n    const headers = new Headers(headersRecord);\n\n    if (body === undefined) {\n        return [\n            headers,\n            undefined\n        ]\n    }\n\n    if (typeof body === 'string') {\n        if (headers.has('content-type') === false) {\n            headers.set('content-type', 'text/plain; charset=utf-8');\n        }\n\n        return [\n            headers,\n            body\n        ];\n    }\n\n\n    if (body instanceof Uint8Array) {\n        if (headers.has('content-type') === false) {\n            headers.set('content-type', 'application/octet-stream');\n        }\n\n        return [\n            headers,\n            body\n        ];\n    }\n\n    //JsJsonType\n    if (headers.has('content-type') === false) {\n        headers.set('content-type', 'application/json; charset=utf-8');\n    }\n\n    return [\n        headers,\n        JSON.stringify(body),\n    ];\n};\n\nexport class Fetch {\n    private readonly getWasm: () => ModuleControllerType<ExportType>;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.getWasm = getWasm;\n    }\n\n    public fetch_send_request = (\n        callback_id: bigint,\n        method: string,\n        url: string,\n        headers: Record<string, string>,\n        body: string | Uint8Array | JsJsonType | undefined,\n    ) => {\n        this.fetch_send_request_inner(callback_id, method, url, headers, body);\n    }\n\n    private fetch_send_request_inner = async (\n        callback_id: bigint,\n        method: string,\n        url: string,\n        headers: Record<string, string>,\n        body: string | Uint8Array | JsJsonType | undefined,\n    ): Promise<void> => {\n        const wasm = this.getWasm();\n\n        const [fetchHeaders, fetchBody] = getHeadersAndBody(headers, body);\n\n        try {\n            const response = await fetch(url, {\n                method,\n                headers: fetchHeaders,\n                body: fetchBody,\n            });\n\n            const contentType = response.headers.get('content-type');\n            const responseType = getTypeResponse(contentType);\n\n            if (responseType === 'json') {\n                catchError(wasm, callback_id, response, async (response) => {\n                    const json = await response.json();\n\n                    wasm.wasm_callback(callback_id, [\n                        true,                                       //ok\n                        { type: JsValueConst.U32, value: response.status },    //http code\n                        {                                           //body (json)\n                            type: JsValueConst.Json,\n                            value: json\n                        }\n                    ]);\n                });\n                return;\n            }\n\n            if (responseType === 'text') {\n                catchError(wasm, callback_id, response, async (response) => {\n                    const text = await response.text();\n\n                    wasm.wasm_callback(callback_id, [\n                        true,                                       //ok\n                        { type: JsValueConst.U32, value: response.status },    //http code\n                        text                                        //body (text)\n                    ]);\n                });\n                return;\n            }\n\n            catchError(wasm, callback_id, response, async (response) => {\n                const text = await response.arrayBuffer();\n                const textUint8Array = new Uint8Array(text);\n\n                wasm.wasm_callback(callback_id, [\n                    true,                                       //ok\n                    { type: JsValueConst.U32, value: response.status },    //http code\n                    textUint8Array                              //body (text)\n                ]);\n            });\n        } catch (err) {\n            console.error('fetch error (1)', err);\n            const responseMessage = new String(err).toString();\n\n            wasm.wasm_callback(callback_id, [\n                false,                                      //ok\n                { type: JsValueConst.U32, value: 0 },                  //http code\n                responseMessage                             //body (string)\n            ]);\n        }\n    }\n}\n","export class EventEmitter<T> {\n    private events: Set<(param: T) => void>;\n\n    constructor() {\n        this.events = new Set()\n    }\n\n    on(callback: (param: T) => void) {\n        let isActive = true;\n\n        const onExec = (param: T) => {\n            if (isActive) {\n                callback(param);\n            }\n        };\n\n        this.events.add(onExec);\n\n        return () => {\n            isActive = false;\n            this.events.delete(onExec);\n        };\n    }\n\n    trigger(param: T) {\n        const eventsCopy = Array.from(this.events.values())\n\n        for (const itemCallbackToRun of eventsCopy) {\n            try {\n                itemCallbackToRun(param);\n            } catch (err) {\n                console.error(err);\n            }\n        }\n    }\n\n    get size(): number {\n        return this.events.size;\n    }\n}\n","type ResolveFn<T> = (data: T) => void;\ntype RejectFn = (err: unknown) => void;\n\ninterface PromiseResolveReject<T> {\n    readonly resolve: (value: T) => void,\n    readonly reject: (err: unknown) => void,\n};\n\nconst createPromiseValue = <T>(): [PromiseResolveReject<T>, Promise<T>] => {\n    let resolve: ResolveFn<T> | null = null;\n    let reject: RejectFn | null = null;\n\n    const promise: Promise<T> = new Promise((localResolve: ResolveFn<T>, localReject: RejectFn) => {\n        resolve = localResolve;\n        reject = localReject;\n    });\n\n    if (resolve === null) {\n        throw Error('createPromiseValue - resolve is null');\n    }\n\n    if (reject === null) {\n        throw Error('createPromiseValue - reject is null');\n    }\n\n    const promiseValue = {\n        resolve,\n        reject,\n    };\n\n    return [promiseValue, promise];\n};\n\nexport class PromiseBoxRace<T> {\n    private promiseResolveReject: PromiseResolveReject<T> | null = null;\n    readonly promise: Promise<T>;\n\n    constructor() {\n        const [promiseResolveReject, promise] = createPromiseValue<T>();\n\n        this.promiseResolveReject = promiseResolveReject;\n        this.promise = promise;\n    }\n\n    resolve = (value: T) => {\n        const promiseResolveReject = this.promiseResolveReject;\n        this.promiseResolveReject = null;\n\n        if (promiseResolveReject === null) {\n            return;\n        }\n\n        promiseResolveReject.resolve(value);\n    }\n\n    reject = (err?: unknown) => {\n        const promiseResolveReject = this.promiseResolveReject;\n        this.promiseResolveReject = null;\n\n        if (promiseResolveReject === null) {\n            return;\n        }\n\n        promiseResolveReject.reject(err);\n    }\n\n    isFulfilled = (): boolean => {\n        return this.promiseResolveReject === null;\n    }\n}\n","import { EventEmitter } from \"./event_emiter\";\nimport { PromiseBoxRace } from \"./promise\";\n\nconst timeout = async (timeout: number): Promise<void> => {\n    return new Promise((resolve: (data: void) => void) => {\n        setTimeout(resolve, timeout);\n    });\n};\n\n\nconst reconnectDelay = async (label: string, timeout_retry: number): Promise<void> => {\n    console.info(`${label} wait ${timeout_retry}ms`);\n    await timeout(timeout_retry);\n    console.info(`${label} go forth`);\n};\n\nexport type SocketEventType = {\n    type: 'message',\n    message: string,\n} | {\n    type: 'socket',\n    socket: SocketConnection\n} | {\n    type: 'close',\n};\n\nexport type OnMessageType = (message: SocketEventType) => void;\nexport type UnsubscribeFnType = () => void;\n\ninterface OpenSocketResult {\n    socket: Promise<SocketConnection | null>,\n    done: Promise<void>,\n}\n\nexport interface SocketConnectionController {\n    send: (message: string) => void,\n    dispose: UnsubscribeFnType\n}\n\nclass LogContext {\n    public constructor(private host: string) {}\n    public formatLog = (message: string): string => `Socket ${this.host} ==> ${message}`;\n}\nexport class SocketConnection {\n    private readonly eventMessage: EventEmitter<string>;\n    public readonly close: () => void;\n    public readonly send: (message: string) => void;\n\n    private constructor(\n        close: () => void,\n        send: (message: string) => void,\n    ) {\n        this.eventMessage = new EventEmitter();\n        this.close = close;\n        this.send = send;\n    }\n\n    private static connect(\n        log: LogContext,\n        host: string,\n        timeout: number,\n    ): OpenSocketResult {\n        const result = new PromiseBoxRace<SocketConnection | null>();\n        const done = new PromiseBoxRace<void>();\n        const socket = new WebSocket(host);\n        let isClose: boolean = false;\n\n        console.info(log.formatLog('starting ...'));\n\n        const closeSocket = (): void => {\n            if (isClose) {\n                return;\n            }\n\n            console.info(log.formatLog('close'));\n\n            isClose = true;\n            result.resolve(null);\n            done.resolve();\n            socket.close();\n        };\n\n\n        const socketConnection = new SocketConnection(\n            closeSocket,\n            (message: string) => {\n                if (isClose) {\n                    return;\n                }\n                socket.send(message);\n            }\n        );\n\n        setTimeout(() => {\n            if (result.isFulfilled() === false) {\n                console.error(log.formatLog(`timeout (${timeout}ms)`));\n                closeSocket();\n            }\n        }, timeout);\n\n        const onOpen = (): void => {\n            console.info(log.formatLog('open'));\n            result.resolve(socketConnection);\n        };\n\n        const onError = (error: Event): void => {\n            console.error(log.formatLog('error'), error);\n            closeSocket();\n        };\n\n        const onMessage = (event: MessageEvent): void => {\n            if (isClose) {\n                return;\n            }\n\n            const dataRaw = event.data;\n\n            if (typeof dataRaw === 'string') {\n                socketConnection.eventMessage.trigger(dataRaw);\n                return;\n            }\n\n            console.error(log.formatLog('onMessage - expected string'), dataRaw);\n        };\n\n        socket.addEventListener('open', onOpen);\n        socket.addEventListener('error', onError);\n        socket.addEventListener('close', closeSocket);\n        socket.addEventListener('message', onMessage);\n\n        return {\n            socket: result.promise,\n            done: done.promise\n        };\n    }\n\n    public static startSocket(\n        host: string,\n        timeout_connection: number,\n        timeout_retry: number,\n        onMessage: OnMessageType,\n    ): SocketConnectionController {\n        let isConnect: boolean = true;\n        let socketConnection: SocketConnection | null = null;\n\n        const log = new LogContext(host);\n\n        (async (): Promise<void> => {\n            while (isConnect) {\n                const openSocketResult = SocketConnection.connect(log, host, timeout_connection);\n\n                const socket = await openSocketResult.socket;\n\n                if (socket === null) {\n                    await reconnectDelay(log.formatLog('reconnect after error'), timeout_retry);\n                    continue;\n                }\n\n                socketConnection = socket;\n                onMessage({\n                    type: 'socket',\n                    socket\n                });\n\n                socket.eventMessage.on(message => {\n                    onMessage({\n                        type: 'message',\n                        message\n                    });\n                });\n\n                await openSocketResult.done;\n\n                onMessage({\n                    type: 'close'\n                });\n\n                if (!isConnect) {\n                    console.info(log.formatLog('disconnect (1)'));\n                    return;\n                }\n\n                await reconnectDelay(log.formatLog('reconnect after close'), timeout_retry);\n            }\n\n            console.info(log.formatLog('disconnect (2)'));\n        })().catch((error) => {\n            console.error(error);\n        });\n\n        return {\n            send: (message: string): void => {\n                if (socketConnection === null) {\n                    console.error('send fail - missing connection', message);\n                } else {\n                    socketConnection.send(message);\n                }\n            },\n            dispose: (): void => {\n                isConnect = false;\n                socketConnection?.close();\n            }\n        };\n    }\n}\n","import { ModuleControllerType } from \"../../wasm_init\";\nimport { ExportType } from \"../../wasm_module\";\nimport { SocketConnection, SocketConnectionController } from \"./connection\";\n\n\nconst assertNeverMessage = (data: never): never => {\n    console.error(data);\n    throw Error('unknown message');\n};\n\nexport class DriverWebsocket {\n    private getWasm: () => ModuleControllerType<ExportType>;\n    private readonly controllerList: Map<bigint, SocketConnectionController>;\n    private readonly socket: Map<bigint, SocketConnection>;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.getWasm = getWasm;\n        this.controllerList = new Map();\n        this.socket = new Map();\n    }\n\n    public websocket_register_callback = (\n        host: string,\n        callback_id: bigint,\n    ) => {\n        const wasm = this.getWasm();\n\n        let controller = SocketConnection.startSocket(\n            host,\n            5000,                   //timeout connection\n            3000,                   //timeout reconnection\n            (message) => {\n\n                if (this.controllerList.has(callback_id) === false) {\n                    return;\n                }\n\n                if (message.type === 'socket') {\n                    this.socket.set(callback_id, message.socket);\n                    wasm.wasm_callback(callback_id, true);\n                    return;\n                }\n\n                if (message.type === 'message') {\n                    wasm.wasm_callback(callback_id, message.message);\n                    return;\n                }\n\n                if (message.type === 'close') {\n                    this.socket.delete(callback_id);\n                    wasm.wasm_callback(callback_id, false);\n                    return;\n                }\n\n                return assertNeverMessage(message);\n            }\n        );\n\n        this.controllerList.set(callback_id, controller);\n    }\n\n    public websocket_unregister_callback = (callback_id: bigint) => {\n        const controller = this.controllerList.get(callback_id);\n\n        if (controller === undefined) {\n            console.error('Expected controller');\n            return;\n        }\n\n        controller.dispose();\n        this.controllerList.delete(callback_id);\n    }\n\n    public websocket_send_message = (\n        callback_id: bigint,\n        message: string,\n    ) => {\n        const socket = this.socket.get(callback_id);\n\n        if (socket === undefined) {\n            console.error(`Missing socket connection for callback_id=${callback_id}`);\n        } else {\n            socket.send(message);\n        }\n    }\n}\n","type NodeType = Element | Comment | Text;\nexport class MapNodes {\n    private data: Map<number, NodeType>;\n\n    constructor() {\n        this.data = new Map();\n    }\n\n    public get_root_html(): Element {\n        return document.documentElement;\n    }\n\n    public get_root_head(): Element {\n        return document.head;\n    }\n\n    public get_root_body(): Element {\n        return document.body;\n    }\n\n    public set(id: number, value: NodeType) {\n        if (id === 1 || id === 2 || id === 3) {\n            //ignore\n        } else {\n            this.data.set(id, value);\n        }\n    }\n\n    public get_any_option(id: number): NodeType | undefined {\n        if (id === 1) {\n            return this.get_root_html();\n        }\n\n        if (id === 2) {\n            return this.get_root_head();\n        }\n\n        if (id === 3) {\n            return this.get_root_body();\n        }\n\n        return this.data.get(id);\n    }\n\n    public get_any(label: string, id: number): NodeType {\n        const item = this.get_any_option(id);\n\n        if (item === undefined) {\n            throw Error(`${label} -> item not found=${id}`);\n        }\n\n        return item;\n    }\n\n    public get(label: string, id: number): NodeType {\n        const item = this.get_any_option(id);\n\n        if (item === undefined) {\n            throw new Error(`${label}->get: Item id not found = ${id}`);\n        }\n        return item;\n    }\n\n    public get_node_element(label: string, id: number): HTMLElement {\n        const node = this.get(label, id);\n        if (node instanceof HTMLElement) {\n            return node;\n        } else {\n            throw Error(`Expected id=${id} as HTMLElement`);\n        }\n    }\n\n    public get_node(label: string, id: number): Element {\n        const node = this.get(label, id);\n        if (node instanceof Element) {\n            return node;\n        } else {\n            throw Error(`Expected id=${id} as Element`);\n        }\n    }\n\n    public get_text(label: string, id: number): Text {\n        const node = this.get(label, id);\n        if (node instanceof Text) {\n            return node;\n        } else {\n            throw Error(`Expected id=${id} as Text`);\n        }\n    }\n\n    public get_comment(label: string, id: number): Comment {\n        const node = this.get(label, id);\n        if (node instanceof Comment) {\n            return node;\n        } else {\n            throw Error(`Expected id=${id} as Comment`);\n        }\n    }\n\n    public delete(label: string, id: number): NodeType {\n        const item = this.get_any_option(id);\n        this.data.delete(id);\n\n        if (item === undefined) {\n            throw new Error(`${label}->delete: Item id not found = ${id}`);\n        }\n\n        return item;\n    }\n}\n","import { ModuleControllerType } from \"../../wasm_init\";\nimport { ExportType } from \"../../wasm_module\";\nimport { HistoryLocation } from \"../historyLocation\";\nimport { MapNodes } from \"./map_nodes\";\n\ninterface FileItemType {\n    name: string,\n    data: Uint8Array,\n}\n\nconst createElement = (name: string): Element => {\n    if (name == \"path\" || name == \"svg\") {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", name);\n    } else {\n        return document.createElement(name);\n    }\n}\n\ntype CommandType = {\n    type: 'create_node',\n    id: number,\n    name: string,\n} | {\n    type: 'create_text',\n    id: number,\n    value: string\n} | {\n    type: 'update_text',\n    id: number,\n    value: string\n} | {\n    type: 'set_attr',\n    id: number,\n    name: string,\n    value: string\n} | {\n    type: 'remove_attr',\n    id: number,\n    name: string\n} | {\n    type: 'remove_node',\n    id: number,\n} | {\n    type: 'remove_text',\n    id: number,\n} | {\n    type: 'insert_before',\n    parent: number,\n    child: number,\n    ref_id: number | null,\n} | {\n    type: 'insert_css',\n    selector: string,\n    value: string\n} | {\n    type: 'create_comment',\n    id: number,\n    value: string\n} | {\n    type: 'remove_comment',\n    id: number,\n} | {\n    type: 'callback_add',\n    id: number,\n    event_name: string,\n    callback_id: number,\n} | {\n    type: 'callback_remove',\n    id: number,\n    event_name: string,\n    callback_id: number,\n};\n\nconst assertNeverCommand = (data: never): never => {\n    console.error(data);\n    throw Error('unknown command');\n};\n\nexport class DriverDom {\n    private historyLocation: HistoryLocation;\n    private readonly getWasm: () => ModuleControllerType<ExportType>;\n    public readonly nodes: MapNodes;\n    private callbacks: Map<bigint, (data: Event) => void>;\n    private initBeforeFirstUpdate: boolean;\n\n    public constructor(historyLocation: HistoryLocation, getWasm: () => ModuleControllerType<ExportType>) {\n        this.historyLocation = historyLocation;\n        this.getWasm = getWasm;\n        this.nodes = new MapNodes();\n        this.callbacks = new Map();\n        this.initBeforeFirstUpdate = false;\n\n        document.addEventListener('dragover', (ev): void => {\n            // console.log('File(s) in drop zone');\n            ev.preventDefault();\n        });\n    }\n\n    public debugNodes(...ids: Array<number>) {\n        const result: Record<number, unknown> = {};\n        for (const id of ids) {\n            const value = this.nodes.get_any_option(id);\n            result[id] = value;\n        }\n        console.info('debug nodes', result);\n    }\n\n    private create_node(id: number, name: string) {\n        const node = createElement(name);\n        this.nodes.set(id, node);\n\n        if (name.toLowerCase().trim() === 'a') {\n            node.addEventListener('click', (e) => {\n                let href = node.getAttribute('href');\n                if (href === null) {\n                    return;\n                }\n\n                if (href.startsWith('#') || href.startsWith('http://') || href.startsWith('https://') || href.startsWith('//')) {\n                    return;\n                }\n\n                e.preventDefault();\n                this.historyLocation.push(href);\n                window.scrollTo(0, 0);\n            })\n        }\n    }\n\n    private set_attribute(id: number, name: string, value: string) {\n        const node = this.nodes.get_node(\"set_attribute\", id);\n        node.setAttribute(name, value);\n\n        if (name == \"value\") {\n            if (node instanceof HTMLInputElement) {\n                node.value = value;\n                return;\n            }\n\n            if (node instanceof HTMLTextAreaElement) {\n                node.value = value;\n                node.defaultValue = value;\n                return;\n            }\n        }\n    }\n\n    private remove_attribute(id: number, name: string) {\n        const node = this.nodes.get_node(\"remove_attribute\", id);\n        node.removeAttribute(name);\n\n        if (name == \"value\") {\n            if (node instanceof HTMLInputElement) {\n                node.value = \"\";\n                return;\n            }\n\n            if (node instanceof HTMLTextAreaElement) {\n                node.value = \"\";\n                node.defaultValue = \"\";\n                return;\n            }\n        }\n    }\n\n    private remove_node(id: number) {\n        const node = this.nodes.delete(\"remove_node\", id);\n        node.remove();\n    }\n\n    private create_text(id: number, value: string) {\n        const text = document.createTextNode(value);\n        this.nodes.set(id, text);\n    }\n\n    private remove_text(id: number) {\n        const text = this.nodes.delete(\"remove_node\", id);\n        text.remove();\n    }\n\n    private update_text(id: number, value: string) {\n        const text = this.nodes.get_text(\"set_attribute\", id);\n        text.textContent = value;\n    }\n\n    private insert_before(parent: number, child: number, ref_id: number | null | undefined) {\n        const parentNode = this.nodes.get(\"insert_before\", parent);\n        const childNode = this.nodes.get_any(\"insert_before child\", child);\n\n        if (ref_id === null || ref_id === undefined) {\n            parentNode.insertBefore(childNode, null);\n        } else {\n            const ref_node = this.nodes.get_any('insert_before ref', ref_id);\n            parentNode.insertBefore(childNode, ref_node);\n        }\n    }\n\n    private insert_css(selector: string, value: string) {\n        const style = document.createElement('style');\n        const content = document.createTextNode(`${selector} { ${value} }`);\n        style.appendChild(content);\n\n        this.nodes.get_root_head().appendChild(style);\n    }\n\n    private callback_click(event: Event, callback_id: bigint) {\n        event.preventDefault();\n        this.getWasm().wasm_callback(callback_id, undefined);\n    }\n\n    private callback_input(event: Event, callback_id: bigint) {\n        const target = event.target;\n\n        if (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement) {\n            this.getWasm().wasm_callback(callback_id, target.value);\n            return;\n        }\n\n        console.warn('event input ignore', target);\n    }\n\n    private callback_change(event: Event, callback_id: bigint) {\n        const target = event.target;\n\n        if (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement) {\n            this.getWasm().wasm_callback(callback_id, target.value);\n            return;\n        }\n\n        console.warn('event input ignore', target);\n    }\n\n    private callback_blur(_event: Event, callback_id: bigint) {\n        this.getWasm().wasm_callback(callback_id, undefined);\n    }\n\n    private callback_mousedown(event: Event, callback_id: bigint) {\n        if (this.getWasm().wasm_callback(callback_id, undefined)) {\n            event.preventDefault()\n        }\n    }\n\n    private callback_mouseup(event: Event, callback_id: bigint) {\n        if (this.getWasm().wasm_callback(callback_id, undefined)) {\n            event.preventDefault()\n        }\n    }\n\n    private callback_mouseenter(_event: Event, callback_id: bigint) {\n        this.getWasm().wasm_callback(callback_id, undefined);\n    }\n\n    private callback_mouseleave(_event: Event, callback_id: bigint) {\n        this.getWasm().wasm_callback(callback_id, undefined);\n    }\n\n    private callback_drop(event: Event, callback_id: bigint) {\n        event.preventDefault();\n\n        if (event instanceof DragEvent) {\n            if (event.dataTransfer === null) {\n                console.error('dom -> drop -> dataTransfer null');\n            } else {\n                const files: Array<Promise<FileItemType>> = [];\n\n                for (let i = 0; i < event.dataTransfer.items.length; i++) {\n                    const item = event.dataTransfer.items[i];\n\n                    if (item === undefined) {\n                        console.error('dom -> drop -> item - undefined');\n                    } else {\n                        const file = item.getAsFile();\n\n                        if (file === null) {\n                            console.error(`dom -> drop -> index:${i} -> It's not a file`);\n                        } else {\n                            files.push(file\n                                .arrayBuffer()\n                                .then((data): FileItemType => ({\n                                    name: file.name,\n                                    data: new Uint8Array(data),\n                                }))\n                            );\n                        }\n                    }\n                }\n\n                if (files.length) {\n                    Promise.all(files).then((files) => {\n                        const params = [];\n\n                        for (const file of files) {\n                            params.push([\n                                file.name,\n                                file.data,\n                            ]);\n                        }\n\n                        this.getWasm().wasm_callback(callback_id, [params]);\n                    }).catch((error) => {\n                        console.error('callback_drop -> promise.all -> ', error);\n                    });\n                } else {\n                    console.error('No files to send');\n                }\n            }\n        } else {\n            console.warn('event drop ignore', event);\n        }\n    }\n\n    private callback_keydown(event: Event, callback_id: bigint) {\n        if (event instanceof KeyboardEvent) {\n            const result = this.getWasm().wasm_callback(callback_id, [\n                event.key,\n                event.code,\n                event.altKey,\n                event.ctrlKey,\n                event.shiftKey,\n                event.metaKey\n            ]);\n\n            if (result === true) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            return;\n        }\n\n        console.warn('keydown ignore', event);\n    }\n\n    private callback_load(event: Event, callback_id: bigint) {\n        event.preventDefault();\n        this.getWasm().wasm_callback(callback_id, undefined);\n    }\n\n    private callback_add(id: number, event_name: string, callback_id: bigint) {\n        const callback = (event: Event) => {\n            if (event_name === 'click') {\n                return this.callback_click(event, callback_id);\n            }\n\n            if (event_name === 'input') {\n                return this.callback_input(event, callback_id);\n            }\n\n            if (event_name === 'change') {\n                return this.callback_change(event, callback_id);\n            }\n\n            if (event_name === 'blur') {\n                return this.callback_blur(event, callback_id);\n            }\n\n            if (event_name === 'mousedown') {\n                return this.callback_mousedown(event, callback_id);\n            }\n\n            if (event_name === 'mouseup') {\n                return this.callback_mouseup(event, callback_id);\n            }\n\n            if (event_name === 'mouseenter') {\n                return this.callback_mouseenter(event, callback_id);\n            }\n\n            if (event_name === 'mouseleave') {\n                return this.callback_mouseleave(event, callback_id);\n            }\n\n            if (event_name === 'keydown') {\n                return this.callback_keydown(event, callback_id);\n            }\n\n            if (event_name === 'hook_keydown') {\n                return this.callback_keydown(event, callback_id);\n            }\n\n            if (event_name === 'drop') {\n                return this.callback_drop(event, callback_id);\n            }\n\n            if (event_name === 'load') {\n                return this.callback_load(event, callback_id);\n            }\n\n            console.error(`No support for the event ${event_name}`);\n        };\n\n        if (this.callbacks.has(callback_id)) {\n            console.error(`There was already a callback added with the callback_id=${callback_id}`);\n            return;\n        }\n\n        this.callbacks.set(callback_id, callback);\n\n        if (event_name === 'hook_keydown') {\n            document.addEventListener('keydown', callback, false);\n        } else {\n            const node = this.nodes.get('callback_add', id);\n            node.addEventListener(event_name, callback, false);\n        }\n    }\n\n    private callback_remove(id: number, event_name: string, callback_id: bigint) {\n        const callback = this.callbacks.get(callback_id);\n        this.callbacks.delete(callback_id);\n\n        if (callback === undefined) {\n            console.error(`The callback is missing with the id=${callback_id}`);\n            return;\n        }\n\n        if (event_name === 'hook_keydown') {\n            document.removeEventListener('keydown', callback);\n        } else {\n            const node = this.nodes.get('callback_remove', id);\n            node.removeEventListener(event_name, callback);\n        }\n    }\n\n    private get_node_to_clear = (element: Element): Array<ChildNode> => {\n        const list: Array<ChildNode> = [];\n        element.childNodes.forEach((item: ChildNode) => {\n            list.push(item);\n        });\n        return list;\n    };\n\n    private get_to_clear = (): [Array<ChildNode>, Array<ChildNode>] => {\n        if (this.initBeforeFirstUpdate === true) {\n            return [[], []];\n        }\n\n        this.initBeforeFirstUpdate = true;\n\n        return [\n            this.get_node_to_clear(this.nodes.get_root_head()),\n            this.get_node_to_clear(this.nodes.get_root_body())\n        ];\n    }\n\n    public dom_bulk_update = (commands: Array<CommandType>) => {\n        const [node_head, node_body] = this.get_to_clear();\n\n        const setFocus: Set<number> = new Set();\n\n        for (const command of commands) {\n            try {\n                this.bulk_update_command(command);\n            } catch (error) {\n                console.error('bulk_update - item', error, command);\n            }\n\n            if (command.type === 'set_attr' && command.name.toLocaleLowerCase() === 'autofocus') {\n                setFocus.add(command.id);\n            }\n        }\n\n        if (setFocus.size > 0) {\n            setTimeout(() => {\n                for (const id of setFocus) {\n                    const node = this.nodes.get_node_element(`set focus ${id}`, id);\n                    node.focus();\n                }\n            }, 0);\n        }\n\n        for (const node of node_body) {\n            node.remove();\n        }\n        \n        for (const node of node_head) {\n            node.remove();\n        }\n    }\n\n    private bulk_update_command(command: CommandType) {\n        if (command.type === 'remove_node') {\n            this.remove_node(command.id);\n            return;\n        }\n\n        if (command.type === 'insert_before') {\n            this.insert_before(command.parent, command.child, command.ref_id === null ? null : command.ref_id);\n            return;\n        }\n\n        if (command.type === 'create_node') {\n            this.create_node(command.id, command.name);\n            return;\n        }\n\n        if (command.type === 'create_text') {\n            this.create_text(command.id, command.value);\n            return;\n        }\n\n        if (command.type === 'update_text') {\n            this.update_text(command.id, command.value);\n            return;\n        }\n\n        if (command.type === 'set_attr') {\n            this.set_attribute(command.id, command.name, command.value);\n            return;\n        }\n\n        if (command.type === 'remove_attr') {\n            this.remove_attribute(command.id, command.name);\n            return;\n        }\n\n        if (command.type === 'remove_text') {\n            this.remove_text(command.id);\n            return;\n        }\n\n        if (command.type === 'insert_css') {\n            this.insert_css(command.selector, command.value);\n            return;\n        }\n\n        if (command.type === 'create_comment') {\n            const comment = document.createComment(command.value);\n            this.nodes.set(command.id, comment);\n            return;\n        }\n\n        if (command.type === 'remove_comment') {\n            const comment = this.nodes.delete(\"remove_comment\", command.id);\n            comment.remove();\n            return;\n        }\n\n        if (command.type === 'callback_add') {\n            this.callback_add(command.id, command.event_name, BigInt(command.callback_id));\n            return;\n        }\n\n        if (command.type === 'callback_remove') {\n            this.callback_remove(command.id, command.event_name, BigInt(command.callback_id));\n            return;\n        }\n\n        return assertNeverCommand(command);\n    }\n}\n","import { ModuleControllerType } from \"../wasm_init\";\nimport { ExportType } from \"../wasm_module\";\nexport class HistoryLocation {\n    private getWasm: () => ModuleControllerType<ExportType>;\n    private callback: Map<bigint, () => void>;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.getWasm = getWasm;\n        this.callback = new Map();\n\n        window.addEventListener(\"popstate\", this.trigger);\n    }\n\n    private trigger = () => {\n        for (const callback of Array.from(this.callback.values())) {\n            callback();\n        }\n    }\n\n    public add = (callback_id: bigint) => {\n        this.callback.set(callback_id, () => {\n            this.getWasm().wasm_callback(callback_id, this.get());\n        });\n    }\n\n    public remove = (callback_id: bigint) => {\n        this.callback.delete(callback_id);\n    }\n\n    public push = (url: string) => {\n        if (this.get() === url) {\n            return;\n        }\n\n        window.history.pushState(null, '', url);\n        this.trigger();\n    }\n\n    public replace = (url: string) => {\n        if (this.get() === url) {\n            return;\n        }\n\n        window.history.replaceState(null, '', url);\n        this.trigger();\n    }\n\n    public get(): string {\n        return window.location.pathname + window.location.search + window.location.hash;\n    }\n}\n","import { ModuleControllerType } from \"./wasm_init\";\nimport { ExportType } from \"./wasm_module\";\nimport { Cookies } from \"./api_browser/cookies\";\nimport { Interval } from \"./api_browser/interval\";\nimport { HashRouter } from \"./api_browser/hashrouter\";\nimport { Fetch } from \"./api_browser/fetch\";\nimport { DriverWebsocket } from \"./api_browser/websocket/websocket\";\nimport { DriverDom } from \"./api_browser/dom/dom\";\nimport { HistoryLocation } from \"./api_browser/historyLocation\";\n\nexport class ApiBrowser {\n    public readonly cookie: Cookies;\n    public readonly interval: Interval;\n    public readonly hashRouter: HashRouter;\n    public readonly historyLocation: HistoryLocation;\n    public readonly fetch: Fetch;\n    public readonly websocket: DriverWebsocket;\n    public readonly dom: DriverDom;\n\n    constructor(getWasm: () => ModuleControllerType<ExportType>) {\n        this.cookie = new Cookies();\n        this.interval = new Interval(getWasm);\n        this.hashRouter = new HashRouter(getWasm);\n        this.historyLocation = new HistoryLocation(getWasm);\n        this.fetch = new Fetch(getWasm);\n        this.websocket = new DriverWebsocket(getWasm);\n        this.dom = new DriverDom(this.historyLocation, getWasm);\n    }\n\n    public getRandom = (min: number, max: number): number => {\n        const range = max - min + 1;\n        let result = Math.floor(Math.random() * range);\n        return min + result;\n    }\n\n    public isBrowser = (): boolean => {\n        return true;\n    }\n\n    public get_env = (name: string): string | null => {\n        return document.documentElement.getAttribute(`data-env-${name}`);\n    }\n}\n","import { ApiBrowser } from \"./api_browser\";\nimport { convertFromJsValue, convertToJsValue, JsValueType } from \"./jsvalue\";\nimport { GuardJsValue } from './guard';\nimport { MapNodes } from \"./api_browser/dom/map_nodes\";\n\nexport class JsNode {\n    private api: ApiBrowser;\n    private nodes: MapNodes;\n    private wsk: unknown;\n\n    public constructor(\n        api: ApiBrowser,\n        nodes: MapNodes,\n        wsk: unknown\n    ) {\n        this.api = api;\n        this.nodes = nodes;\n        this.wsk = wsk;\n    }\n\n    getByProperty(path: Array<JsValueType>, property: string): JsNode | null {\n        try {\n            //@ts-expect-error\n            const nextCurrentPointer = this.wsk[property];\n            return new JsNode(this.api, this.nodes, nextCurrentPointer);\n        } catch (error) {\n            console.error('A problem with get', {\n                path,\n                property,\n                error\n            });\n            return null;\n        }\n    }\n\n    public toValue(): JsValueType {\n        return convertToJsValue(this.wsk);\n    }\n\n    public next(path: Array<JsValueType>, command: JsValueType): JsNode | null {\n        if (Array.isArray(command)) {\n            const [commandName, ...args] = command;\n\n            if (commandName === 'api') {\n                return this.nextApi(path, args);\n            }\n\n            if (commandName === 'root') {\n                return this.nextRoot(path, args);\n            }\n\n            if (commandName === 'get') {\n                return this.nextGet(path, args);\n            }\n\n            if (commandName === 'set') {\n                return this.nextSet(path, args);\n            }\n\n            if (commandName === 'call') {\n                return this.nextCall(path, args);\n            }\n\n            if (commandName === 'get_props') {\n                return this.nextGetProps(path, args);\n            }\n\n            console.error('JsNode.next - wrong commandName', commandName);\n            return null;\n        }\n\n        console.error('JsNode.next - array was expected', { path, command });\n        return null;\n    }\n\n    nextApi(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        if (args.length === 0) {\n            return new JsNode(this.api, this.nodes, this.api);\n        }\n\n        console.error('nextApi: wrong parameter', {path, args});\n        return null;\n    }\n\n    nextRoot(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        const [firstName, ...rest] = args;\n\n        if (GuardJsValue.isString(firstName) && rest.length === 0) {\n            if (firstName === 'window') {\n                return new JsNode(this.api, this.nodes, window);\n            }\n\n            if (firstName === 'document') {\n                return new JsNode(this.api, this.nodes, document);\n            }\n\n            console.error(`JsNode.nextRoot: Global name not found -> ${firstName}`, {path, args});\n            return null;\n        }\n\n        if (GuardJsValue.isNumber(firstName) && rest.length === 0) {\n            const domId = firstName.value;\n\n            const node = this.nodes.get_any_option(domId);\n\n            if (node !== undefined) {\n                return new JsNode(this.api, this.nodes, node);\n            }\n\n            console.error(`JsNode.nextRoot: No node with id=${domId}`, {path, args});\n            return null;\n        }\n\n        console.error('JsNode.nextRoot: wrong parameter', {path, args});\n        return null;\n    }\n\n    nextGet(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        const [property, ...getArgs] = args;\n\n        if (GuardJsValue.isString(property) && getArgs.length === 0) {\n            return this.getByProperty(path, property);\n        }\n\n        console.error('JsNode.nextGet - wrong parameters', { path, args });\n        return null;\n    }\n\n    nextSet(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        const [property, value, ...setArgs] = args;\n\n        if (GuardJsValue.isString(property) && setArgs.length === 0) {\n            try {\n                //@ts-expect-error\n                this.wsk[property] = convertFromJsValue(value);\n                return new JsNode(this.api, this.nodes, undefined);\n            } catch (error) {\n                console.error('A problem with set', {\n                    path,\n                    property,\n                    error\n                });\n                return null;\n            }\n        }\n\n        console.error('JsNode.nextSet - wrong parameters', { path, args });\n        return null;\n    }\n\n    nextCall(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        const [property, ...callArgs] = args;\n\n        if (GuardJsValue.isString(property)) {\n            try {\n                let paramsJs = callArgs.map(convertFromJsValue);\n                //@ts-expect-error\n                const result = this.wsk[property](...paramsJs);\n                return new JsNode(this.api, this.nodes, result);\n            } catch (error) {\n                console.error('A problem with call', {\n                    path,\n                    property,\n                    error\n                });\n                return null;\n            }\n        }\n\n        console.error('JsNode.nextCall - wrong parameters', { path, args });\n        return null;\n    }\n\n    nextGetProps(path: Array<JsValueType>, args: Array<JsValueType>): JsNode | null {\n        const result: Record<string, JsValueType> = {};\n\n        for (const property of args) {\n            if (GuardJsValue.isString(property)) {\n                const value = this.getByProperty(path, property);\n                if (value === null) {\n                    return null;\n                }\n\n                result[property] = value.toValue();\n            } else {\n                console.error('JsNode.nextGetProps - wrong parameters', { path, args, property });\n                return null;\n            }\n        }\n\n        return new JsNode(this.api, this.nodes, result);\n    }\n}\n","import { wasmInit, ModuleControllerType } from './wasm_init';\nimport { ApiBrowser as ApiBrowser } from './api_browser';\nimport { JsNode } from './js_node';\n\n//Number -> u32 or i32\n//BigInt -> u64 or i64\n\nexport type ImportType = {\n    panic_message: (ptr: number, length: number) => void,\n    //call from rust\n    dom_access: (ptr: number, size: number) => number,\n}\n\nexport type ExportType = {\n    alloc: (size: number) => number,\n    free: (pointer: number) => void,\n    wasm_callback: (callback_id: bigint, value_ptr: number) => bigint,  //result => pointer: 32bit, size: 32bit\n    vertigo_entry_function: (major: number, minor: number) => void,\n}\n\nexport class WasmModule {\n    private readonly wasm: ModuleControllerType<ExportType>;\n\n    private constructor(\n        wasm: ModuleControllerType<ExportType>,\n    ) {\n        this.wasm = wasm;\n    }\n\n    public vertigo_entry_function(major: number, minor: number) {\n        this.wasm.exports.vertigo_entry_function(major, minor);\n    }\n\n    public static async create(wasmBinPath: string): Promise<WasmModule> {\n        let wasmModule: ModuleControllerType<ExportType> | null = null;\n\n        const getWasm = (): ModuleControllerType<ExportType> => {\n            if (wasmModule === null) {\n                throw Error('Wasm is no initialized');\n            }\n\n            return wasmModule;\n        };\n\n        const apiBrowser = new ApiBrowser(getWasm);\n\n        //@ts-expect-error\n        window.$vertigoApi = apiBrowser;\n\n        wasmModule = await wasmInit<ImportType, ExportType>(wasmBinPath, {\n            mod: {\n                panic_message: (ptr: number, size: number) => {\n                    const decoder = new TextDecoder(\"utf-8\");\n                    const m = getWasm().getUint8Memory().subarray(ptr, ptr + size);\n                    const message = decoder.decode(m);\n                    console.error('PANIC', message);\n                },\n                dom_access: (ptr: number, size: number): number => {\n                    let args = getWasm().decodeArguments(ptr, size);\n                    if (Array.isArray(args)) {\n                        const path = args;\n                        let wsk = new JsNode(apiBrowser, apiBrowser.dom.nodes, null);\n\n                        for (const pathItem of path) {\n                            const newWsk = wsk.next(path, pathItem);\n\n                            if (newWsk === null) {\n                                return 0;\n                            }\n\n                            wsk = newWsk;\n                        }\n\n                        return getWasm().valueSaveToBuffer(wsk.toValue());\n                    }\n\n                    console.error('dom_access - wrong parameters', args);\n                    return 0;\n                },\n            }\n        });\n\n        return new WasmModule(wasmModule);\n    }\n}\n","import { WasmModule } from \"./wasm_module\";\n\n// vertigo-cli compatibility version, change together with package version.\nconst VERTIGO_COMPAT_VERSION_MAJOR = 0;\nconst VERTIGO_COMPAT_VERSION_MINOR = 6;\n\nconst moduleRun: Set<string> = new Set();\n\nconst runModule = async (wasm: string) => {\n    if (moduleRun.has(wasm)) {\n        //ok, module is run\n        return;\n    }\n\n    if (moduleRun.size > 0) {\n        console.error('Only one wasm module can be run', { moduleRun, wasm });\n        return;\n    }\n\n    moduleRun.add(wasm);\n\n    console.info(`Wasm module: \"${wasm}\" -> start`);\n    const wasmModule = await WasmModule.create(wasm);\n    console.info(`Wasm module: \"${wasm}\" -> initialized`);\n    wasmModule.vertigo_entry_function(VERTIGO_COMPAT_VERSION_MAJOR, VERTIGO_COMPAT_VERSION_MINOR);\n    console.info(`Wasm module: \"${wasm}\" -> launched vertigo_entry_function with version ${VERTIGO_COMPAT_VERSION_MAJOR}.${VERTIGO_COMPAT_VERSION_MINOR}`);\n};\n\nconst findAndRunModule = async () => {\n    document.querySelectorAll('*[data-vertigo-run-wasm]').forEach((node) => {\n        const wasm = node.getAttribute('data-vertigo-run-wasm');\n\n        if (typeof wasm === 'string') {\n            runModule(wasm);\n        } else {\n            console.error('Run error', node);\n        }\n    });\n};\n\n(() => {\n    window.addEventListener('load', findAndRunModule);\n    setTimeout(findAndRunModule, 3000);\n})();\n"],"names":["assertNever","_value","Error","decoder","TextDecoder","encoder","TextEncoder","BufferCursor","constructor","getUint8Memory","ptr","size","this","pointer","dataView","DataView","buffer","getByte","value","getUint8","setByte","byte","setUint8","getU16","getUint16","setU16","setUint16","getU32","getUint32","setU32","setUint32","getI32","getInt32","setI32","setInt32","getU64","getBigUint64","setU64","setBigUint64","getI64","getBigInt64","setI64","setBigInt64","getF64","getFloat64","setF64","setFloat64","getBuffer","result","subarray","setBuffer","length","set","getString","decode","setString","encode","getSavedSize","getStringSize","GuardJsValue","isString","isStringOrNull","isNumber","type","JsValueConst","I32","U32","isBigInt","I64","U64","JsJsonConst","jsJsonGetSize","Array","isArray","sum","item","key","propertyValue","Object","entries","jsJsonDecodeItem","cursor","typeParam","out","listSize","i","push","saveJsJsonToBufferItem","list","F64","True","False","Null","Undefined","Vec","String","List","Json","jsValueDecodeItem","json","console","error","getSize","Uint8Array","saveToBufferItem","undefined","convertFromJsValue","newList","convertToJsValue","BigInt","convertToJsJson","_error","propName","propValue","map","warn","wasmInit","async","wasmBinPath","imports","module_instance","WebAssembly","instantiateStreaming","stream","fetch","err","info","resp","binary","arrayBuffer","instantiate","fetchModule","cacheGetUint8Memory","instance","exports","memory","Memory","decodeArguments","jsValueDecode","valueSaveToBuffer","alloc","savedSize","saveToBuffer","wasm_callback","callback_id","value_ptr","result_ptr_and_size","response","Number","free","Cookies","get","cname","cookie","document","split","cookieChunk","trim","cookieName","cookieValue","decodeURIComponent","get_json","cvalue_str","JSON","parse","e","cvalue","expires_in","cvalueEncoded","encodeURIComponent","d","Date","setTime","getTime","expires","toUTCString","set_json","stringify","Interval","getWasm","interval_set","duration","setInterval","interval_clear","timer_id","clearInterval","timeout_set","setTimeout","timeout_clear","clearTimeout","HashRouter","trigger","callback","from","values","add","remove","delete","new_hash","location","hash","Map","window","addEventListener","substr","catchError","wasm","callbackSuccess","responseMessage","toString","status","Fetch","fetch_send_request","method","url","headers","body","fetch_send_request_inner","fetchHeaders","fetchBody","headersRecord","Headers","has","getHeadersAndBody","responseType","contentType","typeClear","toLowerCase","getTypeResponse","text","textUint8Array","EventEmitter","events","Set","on","isActive","onExec","param","eventsCopy","itemCallbackToRun","PromiseBoxRace","promiseResolveReject","resolve","reject","isFulfilled","promise","Promise","localResolve","localReject","createPromiseValue","reconnectDelay","label","timeout_retry","timeout","LogContext","host","formatLog","message","SocketConnection","close","send","eventMessage","connect","log","done","socket","WebSocket","isClose","closeSocket","socketConnection","event","dataRaw","data","startSocket","timeout_connection","onMessage","isConnect","openSocketResult","catch","dispose","DriverWebsocket","websocket_register_callback","controller","controllerList","assertNeverMessage","websocket_unregister_callback","websocket_send_message","MapNodes","get_root_html","documentElement","get_root_head","head","get_root_body","id","get_any_option","get_any","get_node_element","node","HTMLElement","get_node","Element","get_text","Text","get_comment","Comment","DriverDom","historyLocation","get_node_to_clear","element","childNodes","forEach","get_to_clear","initBeforeFirstUpdate","nodes","dom_bulk_update","commands","node_head","node_body","setFocus","command","bulk_update_command","name","toLocaleLowerCase","focus","callbacks","ev","preventDefault","debugNodes","ids","create_node","createElementNS","createElement","href","getAttribute","startsWith","scrollTo","set_attribute","setAttribute","HTMLInputElement","HTMLTextAreaElement","defaultValue","remove_attribute","removeAttribute","remove_node","create_text","createTextNode","remove_text","update_text","textContent","insert_before","parent","child","ref_id","parentNode","childNode","insertBefore","ref_node","insert_css","selector","style","content","appendChild","callback_click","callback_input","target","callback_change","HTMLSelectElement","callback_blur","_event","callback_mousedown","callback_mouseup","callback_mouseenter","callback_mouseleave","callback_drop","DragEvent","dataTransfer","files","items","file","getAsFile","then","all","params","callback_keydown","KeyboardEvent","code","altKey","ctrlKey","shiftKey","metaKey","stopPropagation","callback_load","callback_add","event_name","callback_remove","removeEventListener","assertNeverCommand","comment","createComment","HistoryLocation","history","pushState","replace","replaceState","pathname","search","ApiBrowser","getRandom","min","max","range","Math","floor","random","isBrowser","get_env","interval","hashRouter","websocket","dom","JsNode","api","wsk","getByProperty","path","property","nextCurrentPointer","toValue","next","commandName","args","nextApi","nextRoot","nextGet","nextSet","nextCall","nextGetProps","firstName","rest","domId","getArgs","setArgs","callArgs","paramsJs","WasmModule","vertigo_entry_function","major","minor","create","wasmModule","apiBrowser","$vertigoApi","mod","panic_message","m","dom_access","pathItem","newWsk","moduleRun","findAndRunModule","querySelectorAll","runModule"],"mappings":"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"}